@using Resources;
@{
    ViewBag.ImgPath = "/Content/img";
}

<div id="disk-wizard" class="innerLR">
<div id="wizard">
    <div class="widget widget-heading-simple widget-body-gray">
		<div class="widget-body"><p class="lead center margin-none padding-none"><h2><span>@Html.Raw(Labels.HOW_TO_USE_PLUGIN_TITLE_UPLOAD)</span></h2></p></div>
	</div>
    <div class="wizard">
	    <div class="widget widget-tabs widget-tabs-double widget-tabs-vertical row-fluid row-merge">		
            <div class="widget-head span3">
		        <ul>
                    <li class="active"><a href="#tab1-1" class="glyphicons circle_ok" data-toggle="tab"><i></i><span class="strong">Antes de empezar. Consideraciones previas</span></a></li>
			        <li><a href="#tab2-1" class="glyphicons circle_ok" data-toggle="tab"><i></i><span class="strong">Paso 1. Crea la vista</span></a></li>
                    <li><a href="#tab3-1" class="glyphicons circle_ok" data-toggle="tab"><i></i><span class="strong">Paso 2. Crea el controlador</span></a></li>
			        <li><a href="#tab4-1" class="glyphicons circle_ok" data-toggle="tab"><i></i><span class="strong">!Listo! Escanea tu documento</span></a></li>
		        </ul>
	        </div>
            <br />
            <!-- // Widget heading END -->			
	        <div class="widget-body span9">
		        <div class="tab-content">		
                    <div class="tab-pane active" id="tab1-1">
				        <div class="row-fluid">
					        <div class="span12">
						        <h4><strong>Consideraciones previas</strong></h4>
						        <p>
                                    Este plugin solo está disponible para equipos con <b>Microsoft Windows</b> instalado.<br />
                                    <br />
                                    El ejemplo de uso que se propone utiliza <b>JQuery Fineuploader</b> para subir la imagen después de escaneada y mostrarla.<br />
                                    <br />
                                    El código de ejemplo es un proyecto <b>ASP.NET 4.0</b> de <b>Visual Studio 2010</b>.@*Descarga el proyecto <a href="@Url.Content("~/Data/Resources/Qapture.Example.zip")">aquí</a>.*@<br />
                                    <br />
                                    Para probar los ejemplos debes <a href="#install-wizard" title=">@Html.Raw(Labels.HOW_TO_INSTALL_PLUGIN_TITLE)">instalar el plugin</a>.
                                </p>
					        </div>
 				        </div>
			        </div>
                    <br />
                    <div class="tab-pane" id="tab2-1">
                        <div class="row-fluid">
                            <div class="span12">
				                <h4><strong>Crea la vista</strong></h4>
                                <p>
                                    Añade las referencias a las bibliotecas de <i>Silverlight</i> y <i>Fineuploader...</i><br />
                                    <br />
                                    <i>~\Views\Scan\ScanExample.cshtml</i>
                                </p>
                                <pre><code>        
@{
    string code = @"
    <script src=""@Url.Content(""~/Scripts/shared/silverlight/silverlight.js"" type=""text/javascript""></script>
    <script src=""@Url.Content(""~/Scripts/shared/silverlight/silverlight.error.js"" type=""text/javascript""></script>
    <script src=""@Url.Content(""~/Scripts/shared/canvas-to-blob.min.js"")"" type=""text/javascript""></script>
    <script src=""@Url.Content(""~/Scripts/shared/jquery.fineuploader-3.7.1.js"")"" type=""text/javascript""></script>";
    <text>@code</text>
}
                                </code></pre>
                                <p>
                                    ...el código de la función <b>FineUploader</b>() que usaremos para que inserte los botones y llame al controlador que se encargará de guardar la imagen a disco después de escaneada y recibida desde el plugin...<br />
                                    <br />
                                    <i>~\Views\Scan\_FineUploaderPartial.cshtml</i>
                                </p>
                                <pre><code>
@{
    code = @"
    <script type=""text/javascript"">
        function FineUploader(fineUploaderClass, extraButtons) {
            $('.' + fineUploaderClass).fineUploader({
                request: {
                    endpoint: '@Url.Action(""Upload"",""Scan"")'
                },
                text: {
                    uploadButton: '@ViewBag.Upload',
                    cancelButton: '@ViewBag.Cancel',
                    retryButton: '@ViewBag.Retry',
                    failUpload: '@ViewBag.FailUpload',
                    waitingForResponse: '@ViewBag.WaitingForResponse'
                },
                messages: {
                    typeError:""@ViewBag.TypeError"",
                    sizeError:""@ViewBag.SizeError""
                },
                validation: {
                    allowedExtensions: ['jpg', 'jpeg', 'png', 'gif'],
                    sizeLimit: 20971520
                },
                template: '<div class=""qq-uploader"">' +
                    '<pre class=""qq-upload-drop-area span4""><span>{dragZoneText}</span></pre>' +
                    '<div class=""qq-upload-button btn btn-inverse"" style=""width: auto;"">{uploadButtonText}</div>' +
                    extraButtons +
                    '<span class=""qq-drop-processing""><span></span><span class=""qq-drop-processing-spinner""></span></span>' +
                    '<ul class=""qq-upload-list"" style=""margin-top: 10px; margin-left: 0px; text-align: center;""></ul>' +
                    '</div>',
                fileTemplate: '<li>' +
                    '<div class=""qq-progress-bar""></div>' +
                    '<span class=""qq-upload-spinner""></span>' +
                    '<span class=""qq-upload-finished""></span>' +
                    '<span class=""qq-upload-file""></span>' +
                    '<span class=""qq-upload-size""></span>' +
                    '<a class=""qq-upload-cancel"" href=""#"">{cancelButtonText}</a>' +
                    '<a class=""qq-upload-retry"" href=""#"">{retryButtonText}</a>' +
                    '<span class=""qq-upload-status-text"">{statusText}</span>' +
                    '</li>',
                classes: {
                    success: 'alert alert-success',
                    fail: 'alert alert-error'
                },
                debug: true
            );
                                           
            $('.' + fineUploaderClass)
                .on('complete', function (event, id, name, response) {
                    $(this).closest('.form').replaceWith(response.html);
                })
                .on('submit', function (event, id, filename) {
                    $(this).fineUploader('setParams', {});
                });
        };
    </script>";
    <text>@code</text>
}
                                </code></pre>
                                <p>
                                    ...añade ahora el código con el objeto que contiene el plugin...<br />
                                    <br />
                                    <i>~\Views\Scan\ScanExample.cshtml</i>
                                </p>
                                <pre><code>        
@{
    code = @"
    <img id=""scanner-screenshot"" src="""" style=""display:none;"">
    <canvas id=""scanner-canvas"" style=""display:none;""></canvas>
    <div class=""silverlightControlHost captureImagen"" style=""height:100px; background:transparent; text-align:center;"">
        <object id=""silverlightControlHost"" data=""data:application/x-silverlight-2,"" type=""application/x-silverlight-2"" width=""100%"" height=""100%"">
        <param name=""source"" value=""/ClientBin/moleQule.Plugin.Qapture.xap""/>
        <param name=""onError"" value=""onSilverlightError"" />
        <param name=""background"" value=""white"" />
        <param name=""minRuntimeVersion"" value=""5.0.61118.0"" />
        <param name=""autoUpgrade"" value=""true"" />
        <a href=""http://go.microsoft.com/fwlink/?LinkID=149156&v=5.0.61118.0"" style=""text-decoration:none"">
            <img src=""http://go.microsoft.com/fwlink/?LinkId=161376"" alt=""Get Microsoft Silverlight"" style=""border-style:none""/>
        </a>
        </object><iframe id=""_sl_historyFrame"" style=""visibility:hidden;height:0px;width:0px;border:0px""></iframe>
    </div>";
    <text>@code</text>
}
                                </code></pre>
				                <p>
                                    ...y el código javascript que comunica con el plugin. La función <b>InitializeScan</b>() definida aquí asocia la llamada al plugin al evento <i>onclick</i> de un botón de la clase <b>silverlight-capture</b>...<br />
                                    <br />
                                    <i>public Boolean Start(string barMessage, string serialNumber, int maxWidth, int maxHeight, bool debug);<br />
                                    (Parámetros [maxWidth = 0: ancho original, maxHeight = 0: alto original, debug = true: muestra información de errores])</i><br /> 
                                    <br />
                                    (Usa el número de serie 'Ygcc560952xsHqevneGmXp0NF8aOUp5C' para el dominio <b>localhost</b> o tu número de serie si has adquirido el plugin)<br />                                    
                                    <br />
                                    <i>~\Views\Scan\ScannerPartial.cshtml</i>
                                </p>
                                <pre><code>
@{
    code = @"
    <script type=""text/javascript"">
        function InitializeScan() {
            $('.silverlight-capture').click(function (e) {
                var control = document.getElementById('silverlightControlHost');
                var button = $(this);
                if (control.Content.Qapture.Start('@ViewBag.WaitingForScanning', 'Ygcc560952xsHqevneGmXp0NF8aOUp5C', 800, 800, true)) {
                    var scannerCanvas = document.querySelector('#scanner-canvas');
                    var image = document.querySelector('#scanner-screenshot');
                    var ctx = scannerCanvas.getContext('2d');
                    scannerCanvas.width = image.width;
                    scannerCanvas.height = image.height;
                    ctx.drawImage(image, 0, 0);
                    if (scannerCanvas.toBlob) {
                        scannerCanvas.toBlob(
                            function (blob) {
                                $(button).closest('.fine-uploader-scan').fineUploader('addBlobs', { Blob: blob, blob: blob, name: 'Scanned image' });
                            },
                            'image/jpeg'
                        );
                    }
                }
            });
        };
    </script>";
    <text>@code</text>
}
                                </code></pre>
                                 <p>
                                    ...la capa que contendrá la imagen escaneada y otra capa de la clase <b>fine-uplader-scan</b> que utilizaremos en el siguiente paso para contener el botón de escaneo...<br />
                                    <br />
                                    <i>~\Views\Scan\_ImagePartial.cshtml</i>
                                </p>
                                <pre><code>        
@{
    code = @"
    <div>
        <a href=""#passport"" data-toggle=""modal"">
            <img alt=""Imagen"" class=""preview"" src=""/NombreImagen.jpg?"" @DateTime.Now/>
        </a>
        <div class=""caption canvas"">
            <div class=""fine-uploader fine-uploader-scan""></div>
        </div>
    </div>";
    <text>@code</text>
}
                                </code></pre>
                                <p>
                                    ...por último, el código javascript del botón que llama al plugin. Este código incluye dos llamadas:                                    
                                </p>
                                <ul>
                                    <li>
                                        Llama a la función <b>FineUploader</b>() que añadimos previamente y que utiliza esta biblioteca para insertar el botón <b>silverlight-capture</b> en la capa <b>"fine-uploader-scan"</b>que acabamos de insertar.<br />
                                    </li>
                                    <li>
                                        Llama a la función <b>InitializeScan</b>() que añadimos antes y que asocia al evento <i>onclick</i> del botón <b>silverlight-capture</b> la llamada a la función <b>Qapture.Start()</b> que inicializa el escaneo.<br />
                                    </li>
                                </ul>
                                <br />
                                <i>~\Views\Scan\_ImagePartial.cshtml</i>
                                <pre><code>
@{
    code = @"
    <script type=""text/javascript"">
        $(document).ready(function () {
            FineUploader('fine-uploader-scan',
                        '<input type=""button"" class=""btn btn-primary silverlight-capture"" value=""Scan""/>');
            InitializeScan();
        });
    </script>";
    <text>@code</text>
}
                                </code></pre>
                            </div>
                        </div>
			        </div>
			        <div class="tab-pane" id="tab3-1">
                        <div class="row-fluid">
                            <div class="span12">
				                <h4><strong>Crea el controlador</strong></h4>
                                <p>
                                    Crea un controlador llamado <b>ScanController</b> y una acción <b>Upload</b> que se encargará de tratar la imagen escaneada. En este caso la copiará a una carpeta local
                                    llamada <i>\Data</i><br />
                                    <br />
                                    <i>~\Controllers\ScanController.cs</i>
                                </p>
                                <pre><code>        
@{
    code = @"
    [HttpPost]
    public JsonResult Upload(HttpPostedFileBase file)
    {
        DocumentViewModel model = new DocumentViewModel();

        if (file == null)
        {
            file = Request.Files[0];
        }
    
        model.Name = ""ScannedImage.jpg"";
        DoUploadFile(model, file);

        ViewData[""action""] = ""Update"";
        ViewData[""controller""] = ""Scan"";
    
        return Json(new { success = true, html = RenderRazorViewToString(""_ImagePartial"", model) }, JsonRequestBehavior.AllowGet);
    }

    public static void DoUploadFile(DocumentViewModel model, HttpPostedFileBase file)
    {
        if ((file != null) && (file.ContentLength > 0))
        {
            byte[] fileData = new byte[file.ContentLength];
            file.InputStream.Read(fileData, 0, file.ContentLength);

            if (!Directory.Exists(Path.GetDirectoryName(model.Path)))
                Directory.CreateDirectory(Path.GetDirectoryName(model.Path));
            
            file.SaveAs(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, model.Path));
        }
    }";

    <text>@code</text>
}
                                </code></pre>
                            </div>
                        </div>
			        </div>
			        <div class="tab-pane" id="tab4-1">
                        <div class="row-fluid">
                            <div class="span12">
				                <h4><strong>¡Listo! Escanea tus documentos</strong></h4>
				                <p>
                                    Ahora tu aplicación es capaz de conectarse al escáner del cliente.
                                </p>
                            </div>
                        </div>
			        </div>		
		        </div>
	        </div>
        </div>
    </div>
</div>
</div>