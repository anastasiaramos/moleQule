##|TYPE Template
##|UNIQUEID f613e17d-74e7-47fd-b611-404e80307b76
##|TITLE Skin01.EntityMngForm
##|NAMESPACE moleQule.Face
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim lstRelateds
Dim txtNamespace
Dim chk

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title = "C# moleQule EntityMngForm Template"
	ui.Width  = 380
	ui.Height = 700

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then 
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
	
	ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
	Set txtNamespace = ui.AddTextBox("txtNamespace", "Project Name", "Provide your namespace")			

	' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox("lstTables", "Select tables:")
	lstTables.Height = 200
	
	ui.AddLabel "lblRelateds", "Select Secondary Data:", "Select tables from the listbox below."
	Set lstRelateds = ui.AddListBox("lstRelateds", "Select Secondary Data:")
	lstRelateds.IsMultiSelect = true
	lstRelateds.Height = 150
	
	If MyMeta.DriverString = "FIREBIRD" Then
		ui.Height = ui.Height + 20
		Set chk = ui.AddCheckBox("ckDialect3", "DIALECT 3", false, "If checked, the stored procedure will use dialect 3 syntax")
		chk.forecolor = "red"
	End If

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
	
	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
	lstRelateds.BindData(db.Tables)
	txtNamespace.Text = UFirst(cmbDatabases.SelectedValue)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
	txtNamespace.Text = UFirst(cmbDatabases.SelectedValue)
End Sub

Function UFirst(name)
	Dim tname
	Dim str
	Dim char
	Dim l

	str =  UCase(Mid(name, 1, 1)) + LCase(Mid(name, 2))
	
	Ufirst = str
	
End Function
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2009, 2010 by iQ Ingenieros
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' EntityMngForm.vbgen
' Last Update : 14/07/2010
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim props
Dim prefix
Dim trimName
Dim Foto
Dim Codigo
Dim Nombre
Dim ID
Dim isRelated
Dim objectName
Dim lista

Dim IDbCommand
Dim IDataParameter
Dim ParameterPrefix

Dim dialect

dialect = 1
If input.Item("ckDialect3") Then
	dialect = 3
End If

prefix = input.Item("prefix")
trimName = input.Item("trimName")

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set TableNames = input.Item("lstTables")
Set SecNames = input.Item("lstRelateds")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the RelatedNames the user selected and generate the business entities
For intLp = 0 To TableNames.Count - 1

	Set objTable = database.Tables(TableNames.item(intLp))
	Set props = objTable.Properties

	objectName = ToClassName(objTable.Alias)
	lista = Plural(objectName)
	
	isRelated = (SecNames.Count > 0)
	
	Codigo = false
	Foto = false
	Nombre = false
	ID = false
	
	For each objColumn in objTable.Columns
		if UCase(objColumn.Alias) = "CODIGO" then Codigo = true	End If
		if UCase(objColumn.Alias) = "FOTO" then Foto = true	End If
		if UCase(objColumn.Alias) = "NOMBRE" then Nombre = true	End If
		if UCase(objColumn.Alias) = "ID" then ID = true	End If
	Next
	
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a EntityMngForm from, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>using CslaEx;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Forms;

using moleQule.Library;
using moleQule.Face;
using moleQule.Face.Skin01;

using <%= namespace %>.Library;
using <%= namespace %>.Library.Reports.Lists;
using <%= namespace %>.Face.Resources;

namespace <%= namespace %>.Face
{
    public partial class <%=objectName%>MngForm : EntityMngSkinForm
    {

        #region Attributes & Properties
		
        public const string ID = "<%=objectName%>MngForm";
		public static Type Type { get { return typeof(<%=objectName%>MngForm); } }

		protected override int BarSteps { get { return base.BarSteps + <%= 3 + SecNames.Count %>; } }
		<%	For each table in SecNames %>
		<%= ToClassName(table)%>List _<%=LCase(Plural(table))%>;
		<% Next %>
		/// <summary>
        ///  Lista de objetos de sólo lectura
        /// </summary>
		private <%=objectName%>List _lista;

		/// <summary>
		///  Lista filtrada de sólo lectura
		/// </summary>
		private <%=objectName%>List _lista_filtrada = null;

        /// <summary>
        ///  Lista de objetos de sólo lectura
        /// </summary>
        internal <%=objectName%>List Lista { get { return _lista; } }

		/// <summary>
		/// Devuelve el OID del objeto activo seleccionado de la tabla
		/// </summary>
		/// <returns></returns>
		public override long ActiveOID { get { return Datos.Current != null ? ((<%=objectName%>Info)Datos.Current).Oid : -1; } }

        /// <summary>
        /// Devuelve el objeto activo seleccionado de la tabla
        /// </summary>
        /// <returns></returns>
        public <%=objectName%>Info ActiveItem { get { return (Datos.Current != null) ? (<%=objectName%>Info)Datos.Current : null; } }
		
		#endregion
		
		#region Factory Methods

		public <%=objectName%>MngForm()
            : this(false) {}

		public <%=objectName%>MngForm(bool isModal)
			: base(isModal)
		{
			InitializeComponent();

            // Parche para poder abrir el formulario en modo diseño y no perder la configuracion de columnas
            DatosLocal_BS = Datos;
            Tabla.DataSource = DatosLocal_BS;
        }
		
		#endregion

		#region Autorizacion

		/// <summary>Aplica las reglas de validación de usuarios al formulario.
		/// <returns>void</returns>
		/// </summary>
		protected override void ApplyAuthorizationRules() 
		{
			Tabla.Visible = <%=objectName%>.CanGetObject();
            Add_Button.Enabled = <%=objectName%>.CanAddObject();
            Edit_Button.Enabled = <%=objectName%>.CanEditObject();
            Delete_Button.Enabled = <%=objectName%>.CanDeleteObject();
            Copy_Button.Enabled = <%=objectName%>.CanAddObject();
            Find_Button.Enabled = <%=objectName%>.CanGetObject();
            Print_Button.Enabled = <%=objectName%>.CanGetObject();
            View_Button.Enabled = <%=objectName%>.CanGetObject();
		}

		#endregion

		#region Style & Source

		/// <summary>Formatea los controles del formulario
		/// <returns>void</returns>
		/// </summary>
		public override void FormatControls()
		{
			base.FormatControls();

            if (Tabla == null) return;

			VScrollBar vs = new VScrollBar();

			int rowWidth = (int)(Tabla.Width	- Tabla.RowHeadersWidth
												- (vs.Width + 2)
												<% If Codigo Then %>- Tabla.Columns[Codigo.Name].Width<% End If %>
												<% If ID Then %>- Tabla.Columns[Id<%=objectName%>.Name].Width<% End If %>
												- Tabla.Columns[COLUMNA.Name].Width);
			<%	If Nombre Then	%>
			Tabla.Columns[Nombre.Name].Width = (int)(rowWidth * 0.1);
			<%	Else %>
			//Tabla.Columns[COLUMNAPRINCIPAL.Name].Width = (int)(rowWidth * 1);
			<%	End If %>
		}

		/// <summary>
		/// Toma la lista de bancos de la base de datos y rellena la tabla.
		/// </summary>
		protected override void RefreshMainData()
		{
			Bar.Grow("<%=objectName%>");

			<%	For each table in SecNames
			%>_<%= LCase(Plural(table))%> = <%=ToClassName(table)%>List.GetList(false);
			Bar.Grow("Lista de <%=Plural(table)%>");
			<% Next %>
			
			_lista = <%=objectName%>List.GetList(false);
			Bar.Grow("Lista de <%=Plural(objectName)%>");

			Datos.DataSource = <%=objectName%>List.SortList(	_lista,
																this.GetGridSortProperty(Tabla),
																this.GetGridSortDirection(Tabla));
			Bar.Grow("Ordenar Lista");
			
			Bar.FillUp();
			
		}
		<%	If isRelated Then %>
		/// <summary>
		///Asigna los valores del grid que no están asociados a propiedades
		/// </summary>
		private void SetUnlinkedGridValues(string gridName)
		{
			switch (gridName)
			{
				case "Tabla":
					{
						foreach (DataGridViewRow row in Tabla.Rows)
						{
							<%	For each table in SecNames
							%>if (row.IsNewRow) return;
							<%=objectName%>Info item = (<%=objectName%>Info)row.DataBoundItem;
							if (item.Oid<%=ToClassName(table)%> == 0)
								item = <%=objectName%>Info.Get(item.Oid);
							row.Cells[<%=ToClassName(table)%>.Name].Value = _<%=LCase(Plural(table))%>.GetItem(item.Oid<%=ToClassName(table)%>).Nombre;
							<%	Next %>
							Datos.MoveNext();
						}

					} break;
			}
		}
		<% End If %>
		
		/// <summary>
		/// Selecciona un elemento de la tabla
		/// </summary>
		/// <param name="oid">Identificar del elemento</param>
		protected override void Select(long oid)
		{
			int foundIndex = Datos.IndexOf(<%=objectName%>List.GetList().GetItem(oid));
			Datos.Position = foundIndex;
		}

		/// <summary>
		/// Filtra la tabla
		/// </summary>
		/// <param name="oid">Identificar del elemento</param>
		protected override void Filter(object filtro)
		{
			_lista_filtrada = ((<%=objectName%>List)filtro).Clone();

			if (Filtros.SelectedTab != Filtros.TabPages[Advanced_TP.Name])
				Filtros.SelectedTab = Filtros.TabPages[Advanced_TP.Name];
			else
			{
				try
				{
					Datos.DataSource =	<%= If Codigo Then 
										%><%=objectName%>List.SortList(_lista_filtrada, Codigo.DataPropertyName, ListSortDirection.Ascending);
										<%	Else
										%><%=objectName%>List.SortList(_lista_filtrada, Columna.DataPropertyName, ListSortDirection.Ascending);
										<%	End If %>
				}
				catch (Exception)
				{
					Datos.DataSource = _lista;
				}
			}
		} 

		/// <summary>
		/// Aplica el filtro correspondiente según la pestaña
		/// </summary>
		protected override void ApplyFilter()
		{
			switch (Filtros.SelectedTab.Name)
			{
				case "Todos_TP":
					{
						try
						{
							//_lista = <%=objectName%>List.GetList();
							RefreshMainData();
							Datos.DataSource = <%=objectName%>List.SortList(_lista, this.GetGridSortProperty(Tabla), this.GetGridSortDirection(Tabla));
						}
						catch (Exception)
						{
							_lista = null;
						}


					} break;

				case "Advanced_TP":
					{
						try
						{
							Datos.DataSource = <%=objectName%>List.SortList(_lista_filtrada, this.GetGridSortProperty(Tabla), this.GetGridSortDirection(Tabla));
						}
						catch (Exception)
						{
							Datos.DataSource = _lista;
						}

					} break;
					<%	For each table in SecNames %>
					case "<%=ToClassName(table)%>_TP":
                    {
                        try
                        {
                            CriteriaEx criteria = <%=objectName%>.GetCriteria(<%=objectName%>.OpenSession());
                            criteria.AddEq("Oid<%=ToClassName(table)%>", ActiveItem.Oid<%=ToClassName(table)%>);
                            _lista = <%=objectName%>List.GetList(criteria);
                            Datos.DataSource = <%=objectName%>List.SortList(	_lista,
																				this.GetGridSortProperty(Tabla),
																				ListSortDirection.Ascending);
                        }
                        catch (Exception)
                        {
                            _lista = null;
                        }

                    } break;
					<%	Next %>
			}
		}

		#endregion

        #region Buttons

        /// <summary>
        /// Abre el formulario para añadir item
        /// <returns>void</returns>
        /// </summary>
        public override void OpenAddForm()
        {
     
            try
            {
                AddForm(new <%=objectName%>AddForm());
            }
            catch (Csla.DataPortalException ex)
            {
                MessageBox.Show(ex.BusinessException.ToString(),
                                Labels.ERROR_TITLE,
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Exclamation);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(),
                                Labels.ERROR_TITLE,
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Exclamation);
            }
		}

		/// <summary>
		/// Abre el formulario para ver item
		/// <returns>void</returns>
		/// </summary>
		public override void OpenViewForm()
		{
			
			try
			{
				AddForm(new <%=objectName%>ViewForm(ActiveOID));
			}
			catch (Csla.DataPortalException ex)
			{
				MessageBox.Show(ex.BusinessException.ToString(),
								Labels.ERROR_TITLE,
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.ToString(),
								Labels.ERROR_TITLE,
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
			}
		}

        /// <summary>
        /// Abre el formulario para editar item
        /// <returns>void</returns>
        /// </summary>
        public override void OpenEditForm() 
        { 
            
            try
            {
                <%=objectName%>EditForm form = new <%=objectName%>EditForm(ActiveOID);
                if(form.EntityInfo != null)
                    AddForm(form);
            }
            catch (Csla.DataPortalException ex)
            {
                MessageBox.Show(ex.BusinessException.ToString(),
								Labels.ERROR_TITLE, 
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(),
								Labels.ERROR_TITLE, 
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
            }
        }

        /// <summary>
        /// Abre el formulario para buscar item
        /// <returns>void</returns>
        /// </summary>
        public override void OpenLocalizeForm() 
        {
          
			try
			{
				<%=objectName%>LocalizeForm form = new <%=objectName%>LocalizeForm();
				form.MngParent = this;
				form.Lista = _lista;
				form.SortProperty = this.GetGridSortProperty(Tabla);
				form.SortDirection = this.GetGridSortDirection(Tabla);
				AddForm(form);
				this.ResizeHeight(form);
			}
            catch (Csla.DataPortalException ex)
            {
                MessageBox.Show(ex.BusinessException.ToString(),
								Labels.ERROR_TITLE, 
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(),
								Labels.ERROR_TITLE, 
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
            }
        }

		/// <summary>
		/// Abre el formulario para borrar item
		/// <returns>void</returns>
		/// </summary>
		public override void DeleteObject(long oid)
		{
			if (MessageBox.Show(Messages.DELETE_CONFIRM,
								Labels.ADVISE_TITLE,
								MessageBoxButtons.YesNoCancel, 
								MessageBoxIcon.Question) == DialogResult.Yes)
			{
				try
				{
                    <% If Foto Then 
					%>//Se elimina la foto
					Images.Delete(_lista.GetItem(oid).Foto, Controler.FOTOS_<%=UCase(Plural(objectName))%>_PATH);
					<% End if %>
                    <%=objectName%>.Delete(oid);

                    //Se eliminan todos los formularios de ese objeto
                    foreach (ManagerEntityForm form in _list_active_form)
                    {
                        if (form.Oid == oid)
                        {
                            form.Dispose();
                            break;
                        }
                    }
				}
				catch (Csla.DataPortalException ex)
				{
					MessageBox.Show(iQExceptionHandler.GetiQException(ex).Message);
				}
				finally
				{
					RefreshList();
				}
			}
		}

		/// <summary>Duplica un objeto y abre el formulario para editar item
		/// <returns>void</returns>
		/// </summary>
		public override void DuplicateObject(long oid) 
		{
			try
			{
                    <%=objectName%> old = <%=objectName%>.Get(oid);
                    <%=objectName%> dup = old.CloneAsNew();
                    old.CloseSession();
					<% If Foto Then
					%>dup.Foto = string.Empty;
					<% End If %>
                    AddForm(new <%=objectName%>AddForm(dup));
			}
			catch (iQException ex)
			{
				MessageBox.Show(ex.Message,
								Labels.ERROR_TITLE,
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
			}
			catch (Csla.DataPortalException ex)
			{
				MessageBox.Show(iQExceptionHandler.GetiQException(ex).Message,
								Labels.ERROR_TITLE, 
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.ToString(),
								Labels.ERROR_TITLE,
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
			}

			RefreshList();
		}

		/// <summary>Imprime la lista del objetos
		/// <returns>void</returns>
		/// </summary>
		public override void PrintList() 
		{
			/*<%=objectName%>ReportMng reportMng = new <%=objectName%>ReportMng(AppContext.ActiveSchema);
			
			<%=objectName%>ListRpt report = reportMng.GetListReport(<%=objectName%>List.GetList((IList<<%=objectName%>Info>)Datos.List));
			
			if (report != null)
			{
				ReportViewer.SetReport(report);
				ReportViewer.ShowDialog();
			}
			else
			{
				MessageBox.Show(Messages.NO_DATA_REPORTS,
								Labels.EMPTY_REPORT,
								MessageBoxButtons.OK,
								MessageBoxIcon.Exclamation);
			}*/
		}

		#endregion

		#region Events

		private void <%=objectName%>MngForm_KeyPress(object sender, KeyPressEventArgs e)
		{
			DataGridViewColumn col;

			if (Tabla.CurrentCell == null)
			{
				if (Tabla.SortedColumn != null)
					col = Tabla.SortedColumn;
				else
					col = Tabla.Columns[0];
			}
			else
				col = Tabla.Columns[Tabla.CurrentCell.ColumnIndex];

            if (col.ValueType != null)
            {
                if (col.ValueType.Name == "Int32") return;
                if (col.ValueType.Name == "Int64") return;
                if (col.ValueType.Name == "Single") return;
                if (col.ValueType.Name == "Double") return;

                string car = e.KeyChar.ToString();
                CslaEx.CriteriaEx criteria = <%=objectName%>.GetCriteria(<%=objectName%>.OpenSession());

                criteria.AddStartsWith(col.DataPropertyName, car);

                // Buscamos las palabras que empiecen por el caracter
                <%=objectName%>List lista = <%=objectName%>List.GetList(criteria);
                Csla.SortedBindingList<<%=objectName%>Info> list =
                    <%=objectName%>List.GetSortedList(lista, col.DataPropertyName, ListSortDirection.Ascending);

                int foundIndex;

                // Nos situamos en la primera aparicion de esa lista en la 
                // que se muestra. Esto se hace pq se ha consultado la bd y no la lista actual
                // lo que puede dar lugar a inconsistencias si otro usuario a cambiado la bd
                foreach (<%=objectName%>Info cli in list)
                {
                    foundIndex = Datos.IndexOf(cli);
                    if (foundIndex != -1)
                    {
                        Datos.Position = foundIndex;
                        break;
                    }
                }
            }
		}

		private void Tabla_DoubleClick(object sender, EventArgs e)
		{
			OpenEditForm();
		}

		private void Tabla_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
		{	<%	If isRelated Then %>
			if (_lista == null <%	For each table in SecNames %>|| _<%=LCase(table)%> == null<%	Next %>) return;
			SetUnlinkedGridValues(Tabla.Name);
			<% End If
		%>}
		
		#endregion

    }
}
<% 
' Save the output file for this Table
SaveAs("MngForm.cs")

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Buiding the EntityMngForm.Designer.cs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>namespace <%=namespace%>.Face
{
    partial class <%=objectName%>MngForm
    {
        /// <summary>
        /// Variable del diseñador requerida.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Limpiar los recursos que se estén utilizando.
        /// </summary>
        /// <param name="disposing">true si los recursos administrados se deben eliminar; false en caso contrario, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Código generado por el Diseñador de Windows Forms

        /// <summary>
        /// Método necesario para admitir el Diseñador. No se puede modificar
        /// el contenido del método con el editor de código.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle5 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle2 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle3 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle4 = new System.Windows.Forms.DataGridViewCellStyle();
            this.DatosLocal_BS = new System.Windows.Forms.BindingSource(this.components);
            this.Tabla = new System.Windows.Forms.DataGridView();
			<%	
			For each objColumn in objTable.Columns
				Select Case UCase(objColumn.Alias) 
					Case "CODIGO" output.writeln("			this.Codigo = new System.Windows.Forms.DataGridViewTextBoxColumn();") 
		 			Case "ID" output.writeln("			this.Id" & objectName & " = new System.Windows.Forms.DataGridViewTextBoxColumn();") 
		 			Case "NOMBRE" output.writeln("			this.Nombre = new System.Windows.Forms.DataGridViewTextBoxColumn();")
		 		End Select 
			Next %>
			this.PanelesH.Panel1.SuspendLayout();
            this.PanelesH.Panel2.SuspendLayout();
            this.PanelesH.SuspendLayout();
            this.PanelesV.Panel1.SuspendLayout();
            this.PanelesV.Panel2.SuspendLayout();
            this.PanelesV.SuspendLayout();
            this.Filtros.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.Datos)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.DatosLocal_BS)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.Tabla)).BeginInit();
            this.SuspendLayout();
            // 
            // Close_Button
            // 
            this.Close_Button.Location = new System.Drawing.Point(10, 511);
            // 
            // PanelesH
            // 
            this.PanelesH.Size = new System.Drawing.Size(839, 557);
            this.PanelesH.SplitterDistance = 114;
            // 
            // PanelesV
            // 
            // 
            // PanelesV.Panel2
            // 
            this.PanelesV.Panel2.Controls.Add(this.Tabla);
            this.PanelesV.Size = new System.Drawing.Size(722, 555);
            // 
            // Filtros
            // 
            this.Filtros.Location = new System.Drawing.Point(302, 3);
            // 
            // Advanced_TP
            // 
            this.Advanced_TP.Size = new System.Drawing.Size(110, -1);
            // 
            // DatosLocal_BS
            // 
            this.DatosLocal_BS.DataSource = typeof(<%=namespace%>.Library.<%=objectName%>List);
            // 
            // Tabla
            // 
            this.Tabla.AutoGenerateColumns = false;
            this.Tabla.BackgroundColor = System.Drawing.SystemColors.ControlLight;
            dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle1.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            dataGridViewCellStyle1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.Tabla.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            this.Tabla.ColumnHeadersHeight = 34;
            this.Tabla.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
			<%	
			For each objColumn in objTable.Columns
				Select Case UCase(objColumn.Alias) 
					Case "CODIGO" output.writeln("			this.Codigo,") 
		 			Case "ID" output.writeln("			this.Id" + objectName + ",") 
		 			Case "NOMBRE" output.writeln("			this.Nombre,")
		 		End Select 
			Next
			%>
			});
            this.Tabla.DataSource = this.DatosLocal_BS;
            dataGridViewCellStyle5.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle5.BackColor = System.Drawing.SystemColors.Window;
            dataGridViewCellStyle5.Font = new System.Drawing.Font("Tahoma", 8.25F);
            dataGridViewCellStyle5.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            dataGridViewCellStyle5.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle5.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle5.WrapMode = System.Windows.Forms.DataGridViewTriState.False;
            this.Tabla.DefaultCellStyle = dataGridViewCellStyle5;
            this.Tabla.Dock = System.Windows.Forms.DockStyle.Fill;
            this.Tabla.EditMode = System.Windows.Forms.DataGridViewEditMode.EditOnKeystroke;
            this.Tabla.Location = new System.Drawing.Point(0, 0);
			this.Tabla.MultiSelect = false;
            this.Tabla.Name = "Tabla";
            this.Tabla.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.Tabla.Size = new System.Drawing.Size(722, 529);
            this.Tabla.TabIndex = 0;
			<%	
			For each objColumn in objTable.Columns
				Select Case UCase(objColumn.Alias) 
					Case "CODIGO" 
					output.writeln("			//") 
					output.writeln("			// Codigo")
					output.writeln("			//")
					output.writeln("			this.Codigo.DataPropertyName = ""Codigo"";")
					output.writeln("			dataGridViewCellStyle2.BackColor = System.Drawing.Color.White;")
					output.writeln("			this.Codigo.DefaultCellStyle = dataGridViewCellStyle2;")
					output.writeln("			this.Codigo.HeaderText = ""Codigo"";")
					output.writeln("			this.Codigo.Name = ""Codigo"";")
					output.writeln("			this.Codigo.ReadOnly = true;") 
		 			Case "ID" 
					output.writeln("			//") 
					output.writeln("			// Id" + objectName)
					output.writeln("			//")
					output.writeln("			this.Id" + objectName + ".DataPropertyName = ""Id"";")
					output.writeln("			dataGridViewCellStyle2.BackColor = System.Drawing.Color.White;")
					output.writeln("			this.Id" + objectName + ".DefaultCellStyle = dataGridViewCellStyle2;")
					output.writeln("			this.Id" + objectName + ".HeaderText = ""CIF / NIF"";")
					output.writeln("			this.Id" + objectName + ".Name = ""Id" + objectName + """;")
					output.writeln("			this.Id" + objectName + ".ReadOnly = true;") 
		 			Case "NOMBRE" 
					output.writeln("			//") 
					output.writeln("			// Nombre")
					output.writeln("			//") 
					output.writeln("			this.Nombre.DataPropertyName = ""Nombre"";")
					output.writeln("			dataGridViewCellStyle2.BackColor = System.Drawing.Color.White;")
					output.writeln("			this.Nombre.DefaultCellStyle = dataGridViewCellStyle2;")
					output.writeln("			this.Nombre.HeaderText = ""Nombre"";")
					output.writeln("			this.Nombre.Name = ""Nombre"";")
					output.writeln("			this.Nombre.ReadOnly = true;") 		
		 		End Select 
			Next%>
			this.Tabla.DataBindingComplete += new System.Windows.Forms.DataGridViewBindingCompleteEventHandler(this.Tabla_DataBindingComplete);
            this.Tabla.DoubleClick += new System.EventHandler(this.Tabla_DoubleClick);
			// 
            // <%=objectName%>MngForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 13F);
            this.ClientSize = new System.Drawing.Size(839, 557);
            this.HelpProvider.SetHelpKeyword(this, "30");
            this.HelpProvider.SetHelpNavigator(this, System.Windows.Forms.HelpNavigator.TopicId);
            this.Name = "<%=objectName%>MngForm";
            this.HelpProvider.SetShowHelp(this, true);
			this.Text = "<%=lista%>";
			this.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.<%=objectName%>MngForm_KeyPress);
            this.Controls.SetChildIndex(this.PanelesH, 0);
            this.PanelesH.Panel1.ResumeLayout(false);
            this.PanelesH.Panel2.ResumeLayout(false);
            this.PanelesH.ResumeLayout(false);
            this.PanelesV.Panel1.ResumeLayout(false);
            this.PanelesV.Panel2.ResumeLayout(false);
            this.PanelesV.ResumeLayout(false);
            this.Filtros.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.Datos)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.DatosLocal_BS)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.Tabla)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.BindingSource DatosLocal_BS;
        private System.Windows.Forms.DataGridView Tabla;
		<%	For each objColumn in objTable.Columns
				Select Case UCase(objColumn.Alias) 
					Case "CODIGO" output.writeln("		private System.Windows.Forms.DataGridViewTextBoxColumn Codigo;") 
		 			Case "ID" output.writeln("		private System.Windows.Forms.DataGridViewTextBoxColumn Id" + objectName + ";") 
		 			Case "NOMBRE" output.writeln("		private System.Windows.Forms.DataGridViewTextBoxColumn Nombre;")
		 		End Select 
			Next %>
    }
}
<% 
	' Save the output file for this Table
	SaveAs("MngForm.Designer.cs")

	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	' Buiding the SelectForm.cs
	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>using System;
using System.Windows.Forms;

namespace <%=namespace%>.Face
{
    public partial class <%=objectName%>SelectForm : Hangar.Face.<%=objectName%>MngForm
    {

        #region Factory Methods

        public <%=objectName%>SelectForm()
            : base(true)
        {
            InitializeComponent();
            DialogResult = DialogResult.Cancel;
        }

        #endregion

        #region Style & Source

        /// <summary>Formatea los controles del formulario
        /// <returns>void</returns>
        /// </summary>
        public override void FormatControls()
        {
            base.FormatControls();
            SetSelectView();
        }

        #endregion

        #region Actions

        /// <summary>
        /// Accion por defecto. Se usa para el Double_Click del Grid
        /// <returns>void</returns>
        /// </summary>
        public override void DefaultAction() { SelectObject(); }

        #endregion
    }
}
<%

	' Save the output file for this Table
	SaveAs("SelectForm.cs")

	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	' Buiding the SelectForm.Designer.cs
	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>namespace <%=namespace%>.Face
{
    partial class <%=objectName%>SelectForm
    {
        /// <summary>
        /// Variable del diseñador requerida.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Limpiar los recursos que se estén utilizando.
        /// </summary>
        /// <param name="disposing">true si los recursos administrados se deben eliminar; false en caso contrario, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Código generado por el Diseñador de Windows Forms

        /// <summary>
        /// Método necesario para admitir el Diseñador. No se puede modificar
        /// el contenido del método con el editor de código.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
        }

        #endregion
    }
}
<%

	' Save the output file for this Table
	SaveAs("SelectForm.Designer.cs")

	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	' Buiding the EntityLocalizeForm.cs
	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

using Csla;
using CslaEx;

using moleQule.Face.Skin01;

using <%=namespace%>.Library;
using <%=namespace%>.Face.Resources;

namespace <%=namespace%>.Face
{
    /// <summary>
    /// Search Form
    /// </summary>
    public partial class <%=objectName%>LocalizeForm : LocalizeSkinForm
    {

        #region Attributes & Properties

		<%=objectName%>MngForm _mng_parent;
		<%=objectName%>List _lista;

		public new <%=objectName%>MngForm MngParent{ set { _mng_parent = value; } }
        public <%=objectName%>List Lista
        {
            set
            {
                _lista = value;
                Datos.DataSource = _lista;
                Datos.MoveFirst();
            }
        }

        override public long ActiveOID()
        {
            if (Datos.Current != null)
                return ((<%=objectName%>Info)(Datos.Current)).Oid;
            else
                return -1;
        }

        #endregion

        #region Factory Methods

        public <%=objectName%>LocalizeForm()
        {
            InitializeComponent();
            this.Text = Labels.<%=UCase(objectName)%>_FIND_TITLE;
        }

        #endregion

        #region Style & Source

        public override void RefreshSecondaryData()
        {
            _lista = _mng_parent.Lista;
        }

        #endregion
		
        #region Actions

        protected override bool DoSearch()
        {
            if (_lista == null)
            {
                MessageBox.Show(Messages.NO_RESULTS);
                return false;
            }
			
			string related = "none";
			
			<%	For each table in SecNames 
			%><%=ToClassName(table)%>List <%=LCase(ToClassName(table))%>List = null;
			<%	Next %>
            
			FCriteria criteria = null;

            foreach (Control ctl in this.Campos_Groupbox.Controls)
            {
                if (((System.Windows.Forms.RadioButton)ctl).Checked)
                {
                    switch (ctl.Name)
                    {
                        case "Nombre_RB":
                            {
                                criteria = new FCriteria<string>("Nombre", Valor_TB.Text);
                            } break;
                    	<%	For each table in SecNames %>
						case "<%=ToClassName(table)%>_RB":
							{
								CriteriaEx criteriaex = <%=ToClassName(table)%>.GetCriteria(<%=ToClassName(table)%>.OpenSession());
								criteriaex.AddContains(NOMBRECAMPOABUSCAR, Valor_TB.Text);

								<%=LCase(ToClassName(table))%>List = <%=ToClassName(table)%>List.GetList(criteriaex);
								// No match
								if (<%=LCase(ToClassName(table))%>List.Count == 0)
								{
									MessageBox.Show(Messages.NO_RESULTS);
									return false;
								}
								related = "<%=ToClassName(table)%>";
							} break;
						<%	Next %>
					}
				}
            }

            // Consulta en la bd 
            SortedBindingList<<%= objectName %>Info> lista;

            if (SortProperty != string.Empty)
            {
                switch (related)
				{
					case "none":
						{
							lista = _lista.GetSortedSubList(criteria, SortProperty, SortDirection);
						} break;
					<%	For each table in SecNames %>	
					case "<%=ToClassName(table)%>":
						{
							<%=objectName%>List list = <%=objectName%>List.GetList(<%=objectName%>List.GetFilteredList(_lista, <%=LCase(ToClassName(table))%>List, "Oid<%=ToClassName(table)%>"));
							lista = list.ToSortedList(SortProperty, SortDirection);
						} break;
					<%	Next %>
                }
            }
            else
                lista = _lista.GetSortedSubList(criteria, "Oid", SortDirection);
				
            if (SortProperty != string.Empty)
            {
				lista = _lista.GetSortedSubList(criteria, SortProperty, SortDirection);
            }
            else
                lista = _lista.GetSortedSubList(criteria, "Oid", SortDirection);

            Datos.DataSource = lista;

            if (lista.Count == 0)
            {
                MessageBox.Show(Messages.NO_RESULTS);
                return false;
            }

            Datos.MoveFirst();

            return true;

        }

        protected override bool DoFilter()
        {
            if (_lista == null)
            {
                MessageBox.Show(Messages.NO_RESULTS);
                return false;
            }

            FCriteria criteria = null;

			string related = "none";
			
			<%	For each table in SecNames 
			%><%=ToClassName(table)%>List <%=LCase(ToClassName(table))%>List = null;
			<%	Next %>

            foreach (Control ctl in this.Campos_Groupbox.Controls)
            {
                if (((System.Windows.Forms.RadioButton)ctl).Checked)
                {
                    switch (ctl.Name)
                    {
                        case "Nombre_RB":
                            {
                                criteria = new FCriteria<string>("Nombre", Valor_TB.Text);
                                break;
                            }
                    	<%	For each table in SecNames %>
						case "<%=ToClassName(table)%>_RB":
							{
								CriteriaEx criteriaex = <%=ToClassName(table)%>.GetCriteria(<%=ToClassName(table)%>.OpenSession());
								criteriaex.AddContains(NOMBRECAMPOABUSCAR, Valor_TB.Text);

								<%=LCase(ToClassName(table))%>List = <%=ToClassName(table)%>List.GetList(criteriaex);
								// No match
								if (<%=LCase(ToClassName(table))%>List.Count == 0)
								{
									MessageBox.Show(Messages.NO_RESULTS);
									return false;
								}
								related = "<%=ToClassName(table)%>";
							} break;
						<%	Next %>							
                    }
                }
            }

            // Consulta en la bd 
            <%=objectName%>List lista = null;

			switch (related)
			{
				case "none":
					{
						lista = <%=objectName%>List.GetList(_lista.GetSubList(criteria));
					} break;
				<%	For each table in SecNames %>	
				case "<%=ToClassName(table)%>":
					{
						lista = <%=objectName%>List.GetList(<%=objectName%>List.GetFilteredList(_lista, <%=LCase(ToClassName(table))%>List, "Oid<%=ToClassName(table)%>"));
					} break;
				<%	Next %>
			}

            Datos.DataSource = lista;

            if (lista.Count == 0)
            {
                MessageBox.Show(Messages.NO_RESULTS);
                return false;
            }

            Datos.MoveFirst();

            _filtered_list = lista;

            return true;

        }

        #endregion

    }
}
<%

	' Save the output file for this Table
	SaveAs("LocalizeForm.cs")

	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	' Buiding the EntityLocalizeForm.Designer.cs
	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>namespace <%=namespace%>.Face
{
    partial class <%=objectName%>LocalizeForm
    {
        /// <summary>
        /// Variable del diseñador requerida.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Limpiar los recursos que se estén utilizando.
        /// </summary>
        /// <param name="disposing">true si los recursos administrados se deben eliminar; false en caso contrario, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Código generado por el Diseñador de Windows Forms

        /// <summary>
        /// Método necesario para admitir el Diseñador. No se puede modificar
        /// el contenido del método con el editor de código.
        /// </summary>
        private void InitializeComponent()
        {
            this.Campos_Panel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.Datos)).BeginInit();
            this.SuspendLayout();
            // 
            // label3
            // 
            this.label3.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            this.label3.Size = new System.Drawing.Size(127, 13);
            // 
            // Buscar_Button
            // 
            this.Buscar_Button.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            this.Buscar_Button.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            // 
            // Filtrar_Button
            // 
            this.Filtrar_Button.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            this.Filtrar_Button.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            // 
			// 
            // <%=objectName%>LocalizeForm
            // 
            this.HelpProvider.SetHelpNavigator(this, System.Windows.Forms.HelpNavigator.TopicId);
            this.Name = "<%=objectName%>LocalizeForm";
            this.HelpProvider.SetShowHelp(this, true);
            this.Text = "<%=objectName%>LocalizeForm";
            ((System.ComponentModel.ISupportInitialize)(this.Datos)).EndInit();
            this.ResumeLayout(false);
        }

        #endregion
	}
}
<%

	' Save the output file for this Table
	SaveAs("LocalizeForm.Designer.cs")

	Next '  tableName
	
	output.write buffer

'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================

Function ToClassName (name)
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)
	j = 1

	'Si es auxiliar estará todo el nombre en mayúsculas
	if (name = UCase(name)) Then
		tname = UCase(Mid(name, 1, 1)) + LCase(Mid(name, 2))
	Else
		tname = UCase(Mid(name, 1, 1)) + Mid(name, 2)
	End If
	
	While j <= l
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			j = j + 1
			char = Mid(tname, j, 1)
		End If
		str = str & char
		j = j + 1 
	Wend
	
	ToClassName = str
	
End Function

Function Plural(Nombre)
	
	Dim ultima
	Dim penultima
	
	ultima = Mid(Nombre, Len(Nombre), 1)
	
	'Si acaba en Mayusculas
	if (ultima = UCase(ultima)) then
		penultima = Mid(Nombre, Len(Nombre)-1, 1)
		if not (LCase(penultima) = "a" or _
			LCase(penultima) = "e" or _
			LCase(penultima) = "i" or _
			LCase(penultima) = "o" or _
			LCase(penultima) = "u") then
			Plural = Mid(Nombre, 1, Len(Nombre) - 1) + "es" + ultima
		else
			Plural = Mid(Nombre, 1, Len(Nombre) - 1) + "s" + ultima
		end if
	else
		if not (LCase(ultima) = "a" or _
				LCase(ultima) = "e" or _
				LCase(ultima) = "i" or _
				LCase(ultima) = "o" or _
				LCase(ultima) = "u") then
			Plural = Nombre + "es"
		else
			Plural = Nombre + "s"
		end if
	end if

end function

Function SaveAs (name)
	
	' Save the output file for this Table
	filename = input.item("txtPath")

	length = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = length Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		If trimName = True Then
			filename = filename & "_" & ToProperty(TrimSpaces(objectName)) & name
		Else
			filename = filename & "_" & objectName & name
		End If
	Else 
		If trimName = True Then
			filename = filename & objectName & name
		Else
			filename = filename & objectName & name
		End If
	End If

	output.save filename, false
	buffer = buffer & output.text
	output.clear

End Function
%>
##|BODY_END
