##|TYPE Template
##|UNIQUEID 4907f4ff-b744-40f0-9d2c-e7e1a0c20b23
##|TITLE ReadOnlyListBaseEx
##|NAMESPACE moleQule.Library
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|COMMENTS_BEGIN
From a Table, MS SQL, MS Access, Firebird, PostgreSQL, Oracle with aggregate support.
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim lstParents
Dim lstChilds
Dim chk
Dim txtNamespace

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title = "Generate C# moleQule ReadOnlyListBaseEx"
	ui.Width  = 380
	ui.Height = 720

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then 
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
	
	ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
	Set txtNamespace = ui.AddTextBox("txtNamespace", "Your.Library", "Provide your namespace")				

	' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
	'lstTables.IsMultiSelect = false
	lstTables.Height = 100
	
	ui.AddLabel "lblParent", "Select parents:", "Select tables from the listbox below."
	Set lstParents = ui.AddListBox ("lstParents", "Select parents:")
	lstParents.IsMultiSelect = true
	lstParents.Height = 100
	
	ui.AddLabel "lblChilds", "Select childs:", "Select tables from the listbox below."
	Set lstChilds = ui.AddListBox ("lstChilds", "Select childs:")
	lstTables.IsMultiSelect = true
	lstChilds.Height = 100
	
	Set chkRoot = ui.AddCheckBox ("chkRoot", "Lista ROOT", false, "")	
	Set chkAux = ui.AddCheckBox ("chkAux", "Tabla Auxiliar", false, "")
	'Set prefix = ui.AddCheckBox("prefix", "Prefix the 'File' with an underscore?", false, "If checked, the file on disk will begin with an underscore")
	'Set trimName = ui.AddCheckBox("trimName", "Trim spaces from output filename?", false, "If checked, the file on disk will have spaces trimmed from the name.")
	
	If MyMeta.DriverString = "FIREBIRD" Then
		ui.Height = ui.Height + 20
		Set chk = ui.AddCheckBox("ckDialect3", "DIALECT 3", false, "If checked, the stored procedure will use dialect 3 syntax")
		chk.forecolor = "red"
	End If

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
	
	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
	lstParents.BindData(db.Tables)
	lstChilds.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
	txtNamespace.Text = UFirst(cmbDatabases.SelectedValue) + ".Library"
End Sub

Function UFirst(name)
	Dim tname
	Dim str
	Dim char
	Dim l

	str =  UCase(Mid(name, 1, 1)) + LCase(Mid(name, 2))
	
	Ufirst = str
	
End Function
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2009, 2010 by iQ Ingenieros
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' ReadOnlyListBaseEx.vbgen
' Last Update : 28/11/2008
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objTable
Dim objColumn
Dim objectNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim props
Dim prefix
Dim trimName
Dim objectName
Dim lista
Dim isRoot
Dim isParent
Dim isChild
Dim isAux

prefix = input.Item("prefix")
trimName = input.Item("trimName")

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set objectNames = input.Item("lstTables")
Set parentNames = input.Item("lstParents")
Set childNames = input.Item("lstChilds")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To objectNames.Count - 1

	Set objTable = database.Tables(objectNames.item(intLp))
	Set props = objTable.Properties
	
	objectName = ToClassName(objTable.Alias)
	lista = objectName + "List"
		
	isRoot = input.Item("chkRoot")
	isParent = (childNames.Count > 0)
	isChild = (parentNames.Count > 0)
	isAux = input.Item("chkAux")
	

	
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.ComponentModel;

using Csla;
using CslaEx;

using moleQule.Library;

using NHibernate;

namespace <%= namespace %>
{
	
	/// <summary>
	<%	If isRoot Then 
			If isParent Then 
	%>/// ReadOnly Business Object With Childs Root Collection  
	<%
			Else 
	%>/// ReadOnly Business Object Root Collection
	<%		End If
		End If
		If (isChild) Then 
			If isParent Then 
	%>/// ReadOnly Business Object With Childs Child Collection
	<%		Else 
	%>/// ReadOnly Business Object Child Collection
	<%		End If 
		End If
	%>/// </summary>
    [Serializable()]
	public class <%= lista %> : ReadOnlyListBaseEx<<%= lista %>, <%= objectName %>Info>
	{	
		#region Business Methods
			
		#endregion
		 
		#region Common Factory Methods
		
		/// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>
        ///  NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
        /// </remarks>
		private <%= lista %>() {}
		
		/// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>
        ///  NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
        /// </remarks>
		private <%= lista %>(IList<<%= objectName %>> list, bool retrieve_childs)
        {
			Childs = retrieve_childs;
            Fetch(list);
        }
		
		/// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>
        ///  NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
        /// </remarks>
		private <%= lista %>(IDataReader reader, bool retrieve_childs)
        {
			Childs = retrieve_childs;
            Fetch(reader);
        }
		
		/// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>
        ///  NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
        /// </remarks>
		private <%= lista %>(IList<<%= objectName %>Info> list, bool retrieve_childs)
        {
			Childs = retrieve_childs;
            Fetch(list);
        }
		
		#endregion
		<%	If isRoot Then %>
		#region Root Factory Methods
		
		public static <%= lista %> GetList() { return <%= lista %>.GetList(true); }
		public static <%= lista %> GetList(bool retrieve_childs)
		{
			CriteriaEx criteria = <%= objectName %>.GetCriteria(<%= objectName %>.OpenSession());
			criteria.Childs = retrieve_childs;
			
			//No criteria. Retrieve all de List
			<% 	If not isAux Then %>
            if (nHManager.Instance.UseDirectSQL)
                criteria.Query = <%= lista %>.SELECT(typeof(<%= objectName %>));
            <%	Else 
			%>if (nHManager.Instance.UseDirectSQL)
				criteria.Query = <%= lista %>.SELECT(typeof(<%= objectName %>), null, null, "Valor");
			else
				criteria.AddOrder("Valor", true);
			<% End If %>
			<%= lista %> list = DataPortal.Fetch<<%= lista %>>(criteria);
			CloseSession(criteria.SessionCode);
			return list;
		}		
		public static <%= lista %> GetList(bool childs, bool cache)
		{
			<%= lista %> list;

			if (!Cache.Instance.Contains(typeof(<%= lista %>)))
			{
				list = ProductoList.GetList(childs);
				Cache.Instance.Save(typeof(<%= lista %>), list);
			}
			else
				list = Cache.Instance.Get(typeof(<%= lista %>)) as <%= lista %>;

			return list;
		}
		
		/// <summary>
		/// Devuelve una lista de todos los elementos
		/// </summary>
		/// <returns>Lista de elementos</returns>
		public static <%= lista %> GetList(CriteriaEx criteria)
		{
			return <%= lista %>.RetrieveList(typeof(<%= objectName %>), AppContext.ActiveSchema.Code, criteria);
		}
		
		/// <summary>
		/// Construye la lista
		/// </summary>
		/// <param name="list">IList origen</param>
        /// <returns>Lista de objetos de solo lectura</returns>
		/// <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        public static <%= objectName %>List GetList(IList<<%= objectName %>> list) { return new <%= lista %>(list,false); }
		
		/// <summary>
		/// Construye la lista
		/// </summary>
		/// <param name="list">IList origen</param>
        /// <returns>Lista de objetos de solo lectura</returns>
		/// <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        public static <%= lista %> GetList(IList<<%= objectName %>Info> list) { return new <%= lista %>(list, false); }
		
		/// <summary>
		/// Devuelve una lista ordenada de todos los elementos
		/// </summary>
		/// <param name="sortProperty">Campo de ordenación</param>
		/// <param name="sortDirection">Sentido de ordenación</param>
		/// <returns>Lista ordenada de elementos</returns>
		public static SortedBindingList<%= "<" & objectName + "Info>" %> GetSortedList (string sortProperty, ListSortDirection sortDirection)
		{
			SortedBindingList<%= "<" & objectName + "Info>" %> sortedList = new SortedBindingList<%= "<" & objectName + "Info>" %>(GetList());
			
			sortedList.ApplySort(sortProperty, sortDirection);
			return sortedList;
		}
		
		/// <summary>
        /// Devuelve una lista ordenada de todos los elementos y sus hijos
        /// </summary>
        /// <param name="sortProperty">Campo de ordenación</param>
        /// <param name="sortDirection">Sentido de ordenación</param>
        /// <param name="childs">Traer hijos</param>
        /// <returns>Lista ordenada de elementos</returns>
        public static SortedBindingList<<%= objectName %>Info> GetSortedList(string sortProperty, ListSortDirection sortDirection, bool childs)
        {
            SortedBindingList<<%= objectName %>Info> sortedList = new SortedBindingList<<%= objectName %>Info>(GetList(childs));

            sortedList.ApplySort(sortProperty, sortDirection);
            return sortedList;
        }
			
		#endregion
		<%	End If 
			If isChild Then %>
		#region Child Factory Methods
		
		/// <summary>
		/// Construye la lista
		/// </summary>
		/// <param name="list">IList origen</param>
        /// <returns>Lista de objetos de solo lectura</returns>
		/// <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
		public static <%= lista %> GetChildList(IList<<%= objectName %>> list) { return new <%= lista %>(list, false); }

		/// <summary>
		/// Construye la lista
		/// </summary>
		/// <param name="list">IList origen</param>
		/// <param name="retrieve_childs">Flag para indicar si quiere obtener los hijos</param>
        /// <returns>Lista de objetos de solo lectura</returns>
		public static <%= lista %> GetChildList(IList<<%= objectName %>> list, bool retrieve_childs) { return new <%= lista %>(list, retrieve_childs); }

		/// <summary>
        /// Construye la lista
        /// </summary>
        /// <param name="reader">IDataReader</param>
        /// <returns>Lista de objetos de solo lectura</returns>
        /// <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
		public static <%= lista %> GetChildList(IDataReader reader) { return new <%= lista %>(reader, false); } 
		
		/// <summary>
        /// Construye la lista
        /// </summary>
        /// <param name="reader">IDataReader</param>
        /// <param name="retrieve_childs">Flag para indicar si quiere obtener los hijos</param>
        /// <returns>Lista de objetos de solo lectura</returns>
        public static <%= lista %> GetChildList(IDataReader reader, bool retrieve_childs) { return new <%= lista %>(reader, retrieve_childs); }

		/// <summary>
		/// Construye la lista
		/// </summary>
		/// <param name="list">IList origen</param>
        /// <returns>Lista de objetos de solo lectura</returns>
		/// <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        public static <%= lista %> GetChildList(IList<<%= objectName %>Info> list) { return new <%= lista %>(list, false); }
		
		#endregion
		<%	End If %>
		#region Common Data Access

		/// <summary>
        /// Construye la lista y obtiene los datos de los hijos de la bd
		/// </summary>
		/// <param name="lista">IList origen</param>
		private void Fetch(IList<<%= objectName %>> lista)
		{
			this.RaiseListChangedEvents = false;

			IsReadOnly = false;
			
			foreach (<%= objectName %> item in lista)
				this.AddItem(item.GetInfo(Childs));

			IsReadOnly = true;

			this.RaiseListChangedEvents = true;
		}

        /// <summary>
        /// Construye la lista y obtiene los datos de los hijos de la bd
		/// </summary>
		/// <param name="reader">IDataReader origen</param>
        private void Fetch(IDataReader reader)
        {
            this.RaiseListChangedEvents = false;

            IsReadOnly = false;

            while (reader.Read())
                this.AddItem(<%= objectName %>Info.GetChild(reader, Childs));

            IsReadOnly = true;

            this.RaiseListChangedEvents = true;
        }
		
        #endregion
		<% If isRoot Then
		%>#region Root Data Access
		 
		/// <summary>
		/// Construye el objeto y se encarga de obtener los
        /// hijos si los tiene y se solicitan
        /// </summary>
        /// <param name="criteria">Criterios de la consulta</param>
		protected override void Fetch(CriteriaEx criteria)
		{
			this.RaiseListChangedEvents = false;
			
			SessionCode = criteria.SessionCode;
			Childs = criteria.Childs;
			
			try
			{
				if (nHMng.UseDirectSQL)
				{					
					IDataReader reader = nHMng.SQLNativeSelect(criteria.Query, Session()); 
					
					IsReadOnly = false;
					
					while (reader.Read())
						this.AddItem(<%= objectName %>Info.GetChild(reader, Childs));

					IsReadOnly = true;
				}
			}
            catch (Exception ex)
            {
                iQExceptionHandler.TreatException(ex);
            }
			
			this.RaiseListChangedEvents = true;
		}
				
		#endregion
		<% End If %>
        #region SQL

        public static string SELECT() { return <%= objectName %>Info.SELECT(0); }
		public static string SELECT(QueryConditions conditions) { return <%= objectName %>.SELECT(conditions, false); }
		
		#endregion		
	}
}

<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	length = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = length Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		If trimName = True Then
			filename = filename & "_" & objectName & "List.cs"
		Else
			filename = filename & "_" & objectName & "List.cs"
		End If
	Else 
		If trimName = True Then
			filename = filename & objectName & "List.cs"
		Else
			filename = filename & objectName & "List.cs"
		End If
	End If

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  objectName
	
	output.write buffer
 %>

<% 
'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " And Not Char = "." Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetDataType (tipo)
	Dim retVal
	Select Case tipo 
		Case "varchar"
			GetDataType = "string"
		Case "text"
			GetDataType = "string"
		Case "date"
			GetDataType = "DateTime"
		Case "bool"
			GetDataType = "bool"
		Case "char"
			GetDataType = "Char"
		Case "date"
			GetDataType = "DateTime"
		Case "float4"
			GetDataType = "float"
		Case "float8"
			GetDataType = "double"
		Case "int2"
			GetDataType = "short"
		Case "int4"
			GetDataType = "int"
		Case "int8"
			GetDataType = "long"
		Case "numeric"
			GetDataType = "Decimal"
		Case "money"
			GetDataType = "Decimal"
		Case "time"
			GetDataType = "DateTime"
		Case "timestamp"
			GetDataType = "DateTime"
		Case "bigint"
			GetDataType = "long"
		Case "decimal"
			GetDataType = "Decimal"
		Case Else
			GetDataType = ""
	End Select
End Function

Function ToProperty (name)
	
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = TrimSpaces(name)
	l = Len(tname)
	upper = 1

	For j = 1 To l			
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			upper = 1
		Else
			If (upper = 1) Then
				str = str & UCase(char)
				upper = 0
			Else 
				str = str & LCase(char)
			End If
		End If
	Next
	ToProperty = str
	
End Function

Function ToClassName (name)
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)
	j = 1

	While j <= l
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			j = j + 1
			char = Mid(tname, j, 1)
		End If
		str = str & char
		j = j + 1 
	Wend
	
	ToClassName = str
	
End Function

%>
##|BODY_END
