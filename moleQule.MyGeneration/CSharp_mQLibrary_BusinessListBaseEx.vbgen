##|TYPE Template
##|UNIQUEID efedc49c-1f7a-44b1-85ce-9e3145e462bb
##|TITLE BusinessListBaseEx
##|NAMESPACE moleQule.Library
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|COMMENTS_BEGIN
From a Table, MS SQL, MS Access, Firebird, PostgreSQL, Oracle with aggregate support.
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim lstParents
Dim lstChilds
Dim txtNamespace
Dim chk

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title =  "C# moleQule BusinessListBaseEx Template"
	ui.Width  = 400
	ui.Height = 720

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then 
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
	
   ' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	ui.AddLabel "lblNamespace", "Module: ",  "Provide your objects module name."
	Set txtNamespace = ui.AddTextBox("txtNamespace", "Module", "Provide module's name")			

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
	lstTables.Height = 100
	
	ui.AddLabel "lblParent", "Select parents:", "Select tables from the listbox below."
	Set lstParents = ui.AddListBox ("lstParents", "Select parents:")
	lstParents.IsMultiSelect = true
	lstParents.Height = 100
	
	ui.AddLabel "lblChilds", "Select childs:", "Select tables from the listbox below."
	Set lstChilds = ui.AddListBox ("lstChilds", "Select childs:")
	lstChilds.IsMultiSelect = true
	lstChilds.Height = 100
	
	Set chkRoot = ui.AddCheckBox ("chkRoot", "Lista ROOT", false, "")
	Set chkAux = ui.AddCheckBox ("chkAux", "Tabla Auxiliar", false, "")
	
	'Set prefix = ui.AddCheckBox("prefix", "Prefix the 'File' with an underscore?", false, "If checked, the file on disk will begin with an underscore")
	'Set trimName = ui.AddCheckBox("trimName", "Trim spaces from output filename?", false, "If checked, the file on disk will have spaces trimmed from the name.")
	
	If MyMeta.DriverString = "FIREBIRD" Then
		ui.Height = ui.Height + 20
		Set chk = ui.AddCheckBox("ckDialect3", "DIALECT 3", false, "If checked, the stored procedure will use dialect 3 syntax")
		chk.forecolor = "red"
	End If

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
	
	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
	lstParents.BindData(db.Tables)
	lstChilds.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub

Function UFirst(name)
	Dim tname
	Dim str
	Dim char
	Dim l

	str =  UCase(Mid(name, 1, 1)) + LCase(Mid(name, 2))
	
	Ufirst = str
	
End Function
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2009, 2010 by iQ Ingenieros
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'-----------------------------------------------------------------------------
' BusinessListBaseEx.vbgen
' Created : 2010
' Last Update : 16/12/2013
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objTable
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim props
Dim prefix
Dim trimName
Dim lista
Dim isRoot
Dim isChild
Dim isAux
Dim objectName

prefix = input.Item("prefix")
trimName = input.Item("trimName")

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")
Set parentNames = input.Item("lstParents")
Set childNames = input.Item("lstChilds")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))
	Set props = objTable.Properties
	
	if input.Item("chkAux") then
		auxiliar = "AUXILIAR"
	else
		auxiliar = objectName
	end if
	
	isRoot = input.Item("chkRoot")
	isParent = (childNames.Count > 0)
	isChild = (parentNames.Count > 0)
	isAux = input.Item("chkAux")
	
	objectName = ToClassName(objTable.Alias)
	lista = Plural(objectName)
	
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.ComponentModel;

using Csla;
using NHibernate;
using moleQule.Library;
using moleQule.Library.CslaEx;

namespace moleQule.Library.<%= namespace %>
{
	/// <summary>
	<%	If isRoot Then 
			If isParent Then 
	%>/// Editable Business Object With Childs Root Collection  
	<%
			Else 
	%>/// Editable Business Object Root Collection
	<%		End If
		End If
		If (isChild) Then 
			If isParent Then 
	%>/// Editable Business Object With Editable Child Collection
	<%		Else 
	%>/// Editable Business Object Child Collection
	<%		End If 
		End If
	%>/// </summary>
    [Serializable()]
    public class <%= lista %> : BusinessListBaseEx<<%=lista%>, <%= objectName %>>
    {
		#region Business Methods

		public void SetMaxSerial()
		{
			foreach (<%= objectName %> item in this)
				if (item.Serial > _max_serial) MaxSerial = item.Serial;
		}
		<%	If isRoot Then %>
		/// <summary>
        /// Crea y añade un nuevo elemento a la lista principal
        /// El elemento SE CREARA en la tabla correspondiente cuando se guarde la lista
        /// </summary>
        public <%= objectName %> NewItem()
        {
            this.AddItem(<%= objectName %>.NewChild());
            return this[Count - 1];
        }
		<% 	End If 		
		 	If isChild Then	%>
		<% 	For each parentName in parentNames %>		
		public void SetNextCode(<%= ToClassName(parentName) %> parent, <%= objectName %> item)
		{
			int index = this.IndexOf(item);

			if (index == 0)
			{
				item.GetNewCode(parent.Oid);
				MaxSerial = item.Serial;
			}
			else
			{
				item.Serial = MaxSerial + 1;
				item.Code = item.Serial.ToString(Resources.Defaults.DEFAULT_CODE_FORMAT);
				MaxSerial++;
			}
		}
		
		/// <summary>
		/// Crea un nuevo elemento y lo añade a la lista
		/// </summary>
		/// <returns>Nuevo item</returns>
		public <%= objectName %> NewItem(<%=ToClassName(parentName)%> parent)
		{
			this.NewItem(<%= objectName %>.NewChild(parent));
			<%= objectName %> item = this[Count - 1];
			SetNextCode(parent, item);
			return item;
		}
		<% 	Next %>
		<%	End If %>
		#endregion
		
		#region Common Factory Methods

		/// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>
        ///  NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
        /// </remarks>
        private <%=lista%>() { }

		#endregion		
		<% If isRoot Then %>
		#region Root Factory Methods
		
        /// <summary>
        /// Crea una nueva lista vacía
        /// </summary>
        /// <returns>Lista vacía</returns>
        public static <%=lista%> NewList() 
		{ 	
			if (!<%= objectName %>.CanAddObject())
				throw new System.Security.SecurityException(Library.Resources.Messages.USER_NOT_ALLOWED);
			
			return new <%=lista%>(); 
		}

		private static <%=lista%> GetList(string query, bool childs)
		{
			if (!<%= objectName %>.CanEditObject())
				throw new System.Security.SecurityException(Library.Resources.Messages.USER_NOT_ALLOWED);

			return GetList(query, childs, -1);
		}		
		
		public static <%=lista%> GetList(bool childs = true) 
		{
			return GetList(<%=lista%>.SELECT(), childs);
		}
		public static <%=lista%> GetList(QueryConditions conditions, bool childs)
		{
			return GetList(<%=lista%>.SELECT(conditions), childs);
		}
		
        #endregion
		<% 	End If 
		 	If isChild Then %>
		#region Child Factory Methods

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="lista">IList de objetos</param>
        /// <remarks>NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods</remarks>
        private <%=lista%>(IList<<%= objectName %>> lista)
		{
			MarkAsChild();
			Fetch(lista);
		}
        private <%=lista%>(int sessionCode, IDataReader reader, bool childs)
        {
            MarkAsChild();
            Childs = childs;
			SessionCode = sessionCode;
            Fetch(reader);
        }
		
		/// <summary>
        /// Construye una nueva lista vacía
        /// </summary>
        /// <returns>Lista vacía</returns>
        public static <%=lista%> NewChildList() 
        { 
            <%=lista%> list = new <%=lista%>(); 
            list.MarkAsChild(); 
            return list; 
        }
		
		/// <summary>
        /// Construye una nueva lista
        /// </summary>
        /// <param name="lista">IList origen</param>
        /// <returns>Lista creada</returns>
		public static <%= lista %> GetChildList(IList<<%= objectName %>> lista) { return new <%= lista %>(lista); }

        /// <summary>
        /// Construye una nueva lista
        /// </summary>
        /// <param name="reader">IDataReader origen</param>
        /// <returns>Lista creada</returns>
        /// <remarks>Obtiene los hijos</remarks>
        public static <%=lista%> GetChildList(int sessionCode, IDataReader reader, bool childs = true) { return new <%= lista %>(sessionCode, reader, childs); }		
		<% 	For each parentName in parentNames %>
		public static <%=lista%> GetChildList(<%=ToClassName(parentName)%> parent, bool childs)
		{
			CriteriaEx criteria = <%=ToClassName(parentName)%>.GetCriteria(parent.SessionCode);

			criteria.Query = SELECT(parent);
			criteria.Childs = childs;

			return DataPortal.Fetch<<%=lista%>>(criteria);
		}
		
		<% 	Next %>
		#endregion
		<% 	End If 
        	If isRoot Then %>
		#region Root Data Access

        /// <summary>
        /// Construye el objeto y se encarga de obtener los
        /// hijos si los tiene y se solicitan
        /// </summary>
        /// <param name="criteria">Criterios de la consulta</param>
        /// <remarks>LA UTILIZA EL DATAPORTAL</remarks>
        private void DataPortal_Fetch(CriteriaEx criteria)
        {
            Fetch(criteria);
        }

		/// <summary>
		/// Construye el objeto y se encarga de obtener los
        /// hijos si los tiene y se solicitan
        /// </summary>
        /// <param name="criteria">Criterios de la consulta</param>
        private void Fetch(CriteriaEx criteria)
        {
            try
            {
				this.RaiseListChangedEvents = false;
				SessionCode = criteria.SessionCode;
				Childs = criteria.Childs;

				if (nHMng.UseDirectSQL)
                {
                    <%=objectName%>.DoLOCK(Session());

                    IDataReader reader = nHMng.SQLNativeSelect(criteria.Query, Session());

                    while (reader.Read())
                        this.AddItem(<%=objectName%>.GetChild(SessionCode, reader, Childs));
                }
            }
            catch (Exception ex)
            {
                if (Transaction() != null) Transaction().Rollback();
                iQExceptionHandler.TreatException(ex, new object[] { criteria.Query });
            }
            finally
            {
                this.RaiseListChangedEvents = true;
            }
        }

        /// <summary>
        /// Realiza el Save de los objetos de la lista. Inserta, Actualiza o Borra en función
		/// de los flags de cada objeto de la lista
		/// </summary>
		/// <param name="reader">IDataReader origen</param>
        protected override void DataPortal_Update()
        {
            this.RaiseListChangedEvents = false;

            // update (thus deleting) any deleted child objects
            foreach (<%=objectName%> obj in DeletedList)
                obj.DeleteSelf(this);

            // now that they are deleted, remove them from memory too
            DeletedList.Clear();

            try
            {
				// add/update any current child objects
				foreach (<%=objectName%> obj in this)
				{
					if (obj.IsNew)
						obj.Insert(this);
					else
						obj.Update(this);
				}

                if (!SharedTransaction) Transaction().Commit();
            }
            catch (Exception ex)
            {
                if ((!SharedTransaction) && (Transaction() != null)) Transaction().Rollback();
				iQExceptionHandler.TreatException(ex);
            }
            finally
            {
                if (!SharedTransaction) BeginTransaction();
                this.RaiseListChangedEvents = true;
            }
        }

        #endregion
		<%End if
		  If isChild Then %>
		#region Child Data Access

		/// <summary>
        /// Construye la lista y obtiene los datos de los hijos de la bd
		/// </summary>
		/// <param name="lista">IList origen</param>
        private void Fetch(IList<<%= objectName %>> lista)
		{
			this.RaiseListChangedEvents = false;

			foreach (<%=objectName%> item in lista)
				this.AddItem(<%=objectName%>.GetChild(item, Childs));

			this.RaiseListChangedEvents = true;
		}
		
        /// <summary>
        /// Construye la lista y obtiene los datos de los hijos de la bd
		/// </summary>
		/// <param name="reader">IDataReader origen con los elementos a insertar</param>
        private void Fetch(IDataReader reader)
        {
            this.RaiseListChangedEvents = false;

            while (reader.Read())
                this.AddItem(<%=objectName%>.GetChild(SessionCode, reader, Childs));

            this.RaiseListChangedEvents = true;
        }

		<%For each parentName in parentNames %>
        /// <summary>
        /// Realiza el Save de los objetos de la lista. Inserta, Actualiza o Borra en función
		/// de los flags de cada objeto de la lista
		/// </summary>
		/// <param name="parent">BusinessBaseEx padre de la lista</param>
		internal void Update(<%=ToClassName(parentName) %> parent)
		{
			try
			{
				this.RaiseListChangedEvents = false;

				SessionCode = parent.SessionCode;
				
				// update (thus deleting) any deleted child objects
				foreach (<%= objectName %> obj in DeletedList)
					obj.DeleteSelf(parent);

				// now that they are deleted, remove them from memory too
				DeletedList.Clear();

				// add/update any current child objects
				foreach (<%= objectName %> obj in this)
				{	
					if (obj.IsNew)
					{
						SetNextCode(parent, obj);
						obj.Insert(parent);
					}
					else
						obj.Update(parent);
				}
			}
			finally
			{
				this.RaiseListChangedEvents = true;
			}
		}
		<%Next %>
		#endregion<% 
		End if %>
			
        #region SQL

        public static string SELECT() { return SELECT(new QueryConditions()); }
		public static string SELECT(QueryConditions conditions) { return <%=objectName%>.SELECT(conditions, true); }
		<%For each parentName in parentNames%>
		public static string SELECT(<%=ToClassName(parentName)%> parent) { return <%=objectName%>.SELECT(new QueryConditions{ <%=ToClassName(parentName)%> = parent.GetInfo(false) }, true); }
		<%Next %>	
		#endregion
    }
}

<% 
' Save the output file for this Table
SaveAs(lista & ".cs")

lista = objectName + "List"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Buiding the EntityList.cs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.ComponentModel;

using Csla;
using NHibernate;
using moleQule.Library;
using moleQule.Library.CslaEx;

namespace moleQule.Library.<%= namespace %>
{	
	/// <summary>
	<%	If isRoot Then 
			If isParent Then 
	%>/// ReadOnly Business Object With Childs Root Collection  
	<%
			Else 
	%>/// ReadOnly Business Object Root Collection
	<%		End If
		End If
		If (isChild) Then 
			If isParent Then 
	%>/// ReadOnly Business Object With Childs Child Collection
	<%		Else 
	%>/// ReadOnly Business Object Child Collection
	<%		End If 
		End If
	%>/// </summary>
    [Serializable()]
	public class <%=lista%> : ReadOnlyListBaseEx<<%= lista %>, <%=objectName%>Info, <%=objectName%>>
	{	
		#region Business Methods
			
		#endregion
		 
		#region Common Factory Methods
		
		/// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>
        ///  NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
        /// </remarks>
		private <%=lista%>() {}
		private <%=lista%>(IList<<%= objectName %>> list, bool childs)
        {
			Childs = childs;
            Fetch(list);
        }
		private <%=lista%>(IList<<%= objectName %>Info> list, bool childs)
        {
			Childs = childs;
            Fetch(list);
        }
		
		#endregion
		<%	If isRoot Then %>
		#region Root Factory Methods
		
		public static <%=lista%> NewList() { return new <%=lista%>(); }
		
		private static <%=lista%> GetList(string query, bool childs)
		{
			CriteriaEx criteria = <%=objectName%>.GetCriteria(<%=objectName%>.OpenSession());
			criteria.Childs = childs;
			
            if (nHManager.Instance.UseDirectSQL)
                criteria.Query = query;

			<%=lista%> list = DataPortal.Fetch<<%= lista %>>(criteria);
			CloseSession(criteria.SessionCode);
			return list;
		}	
		public static <%=lista%> GetList(QueryConditions conditions, bool childs) {	return GetList(SELECT(conditions), childs); }				
		public static <%=lista%> GetList(bool childs = true)
		{
			<%If not isAux Then %>
            return GetList(SELECT(), childs);
            <%Else 
			%>return GetList(SELECT(typeof(<%= objectName %>), null, null, "Valor"), childs);
			<% End If %>
		}
		
        public static <%=objectName%>List GetList(IList<<%= objectName %>> list) { return new <%= lista %>(list,false); }
        public static <%=lista%> GetList(IList<<%= objectName %>Info> list) { return new <%= lista %>(list, false); }
		
		/// <summary>
		/// Devuelve una lista ordenada de todos los elementos
		/// </summary>
		/// <param name="sortProperty">Campo de ordenación</param>
		/// <param name="sortDirection">Sentido de ordenación</param>
		/// <returns>Lista ordenada de elementos</returns>
		public static SortedBindingList<%= "<" & objectName + "Info>" %> GetSortedList (string sortProperty, ListSortDirection sortDirection)
		{
			SortedBindingList<%= "<" & objectName + "Info>" %> sortedList = new SortedBindingList<%= "<" & objectName + "Info>" %>(GetList());
			
			sortedList.ApplySort(sortProperty, sortDirection);
			return sortedList;
		}
        public static SortedBindingList<<%= objectName %>Info> GetSortedList(string sortProperty, ListSortDirection sortDirection, bool childs)
        {
            SortedBindingList<<%= objectName %>Info> sortedList = new SortedBindingList<<%= objectName %>Info>(GetList(childs));

            sortedList.ApplySort(sortProperty, sortDirection);
            return sortedList;
        }
			
		#endregion
		<%	End If 
			If isChild Then %>
		#region Child Factory Methods
						
		/// <summary>
        /// Constructor
        /// </summary>
        /// <remarks>
        ///  NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
        /// </remarks>	
		private <%= lista %>(int sessionCode, IDataReader reader, bool childs)
        {
			SessionCode = sessionCode;
			Childs = childs;
			SessionCode = sessionCode;
            Fetch(reader);
        }

		/// <summary>
		/// Construye la lista
		/// </summary>
		/// <param name="list">IList origen</param>
        /// <returns>Lista de objetos de solo lectura</returns>
		/// <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
		public static <%=lista%> GetChildList(int sessionCode, IDataReader reader, bool childs = false) { return new <%= lista %>(sessionCode, reader, childs); }
		public static <%=lista%> GetChildList(IList<<%= objectName %>> list, bool childs = false) { return new <%=lista%>(list, childs); }
        public static <%=lista%> GetChildList(IList<<%= objectName %>Info> list, bool childs = false) { return new <%= lista %>(list, childs); }
<%		
For each parentName in parentNames %>		
		public static <%=lista%> GetChildList(<%=ToClassName(parentName)%>Info parent, bool childs)
		{
			CriteriaEx criteria = <%= objectName %>.GetCriteria(<%= objectName %>.OpenSession());

			criteria.Query = SELECT(parent);
			criteria.Childs = childs;

			<%=lista%> list = DataPortal.Fetch<<%=lista%>>(criteria);
			CloseSession(criteria.SessionCode);

			return list;
		}<% 
Next%>		
		#endregion
		<%	End If %>
		#region Common Data Access

		/// <summary>
        /// Construye la lista y obtiene los datos de los hijos de la bd
		/// </summary>
		/// <param name="lista">IList origen</param>
		private void Fetch(IList<<%= objectName %>> lista)
		{
			this.RaiseListChangedEvents = false;

			IsReadOnly = false;
			
			foreach (<%= objectName %> item in lista)
				this.AddItem(item.GetInfo(Childs));

			IsReadOnly = true;

			this.RaiseListChangedEvents = true;
		}

        /// <summary>
        /// Construye la lista y obtiene los datos de los hijos de la bd
		/// </summary>
		/// <param name="reader">IDataReader origen</param>
        private void Fetch(IDataReader reader)
        {
            this.RaiseListChangedEvents = false;

            IsReadOnly = false;

            while (reader.Read())
                this.AddItem(<%= objectName %>Info.GetChild(SessionCode, reader, Childs));

            IsReadOnly = true;

            this.RaiseListChangedEvents = true;
        }
		
        #endregion
		<% If isRoot Then
		%>#region Root Data Access
		 
		/// <summary>
		/// Construye el objeto y se encarga de obtener los
        /// hijos si los tiene y se solicitan
        /// </summary>
        /// <param name="criteria">Criterios de la consulta</param>
		protected override void Fetch(CriteriaEx criteria)
		{
			this.RaiseListChangedEvents = false;
			
			SessionCode = criteria.SessionCode;
			Childs = criteria.Childs;
			
			try
			{
				if (nHMng.UseDirectSQL)
				{					
					IDataReader reader = nHMng.SQLNativeSelect(criteria.Query, Session()); 
					
					IsReadOnly = false;
					
					while (reader.Read())
						this.AddItem(<%=objectName%>Info.GetChild(SessionCode, reader, Childs));

                    if (criteria.PagingInfo != null)
                    {
                        reader = nHManager.Instance.SQLNativeSelect(<%=objectName%>.SELECT_COUNT(criteria), criteria.Session);
                        if (reader.Read()) criteria.PagingInfo.TotalItems = Format.DataReader.GetInt32(reader, "TOTAL_ROWS");
                    }
					
					IsReadOnly = true;
				}
			}
            catch (Exception ex)
            {
                iQExceptionHandler.TreatException(ex, new object[] { criteria.Query });
            }
			
			this.RaiseListChangedEvents = true;
		}
				
		#endregion
		<% End If %>
        #region SQL

        public static string SELECT() { return SELECT(new QueryConditions()); }
		public static string SELECT(QueryConditions conditions) { return <%=objectName%>.SELECT(conditions, false); }
		<% 	For each parentName in parentNames %>
		public static string SELECT(<%= ToClassName(parentName) %>Info parent) { return  <%= objectName %>.SELECT(new QueryConditions{ <%= ToClassName(parentName) %> = parent }, false); }
		<% 	Next %>
		#endregion		
	}
}
<%
' Save the output file for this Table
SaveAs(lista & ".cs")

%>

<% 

Next '  tableName

output.write buffer

Function SaveAs (name)
	
	' Save the output file for this Table
	filename = input.item("txtPath")

	length = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = length Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		If trimName = True Then
			filename = filename & "_" & name
		Else
			filename = filename & "_" & name
		End If
	Else 
		If trimName = True Then
			filename = filename & name
		Else
			filename = filename & name
		End If
	End If

	output.save filename, false
	buffer = buffer & output.text
	output.clear

End Function

Function Plural(Nombre)
	
	Dim ultima
	Dim penultima
	
	ultima = Mid(Nombre, Len(Nombre), 1)
	penultima = Mid(Nombre, Len(Nombre)-1, 1)
	
	'Si acaba en Mayusculas
	if (ultima = UCase(ultima)) then
		penultima = Mid(Nombre, Len(Nombre)-1, 1)
		if not (LCase(penultima) = "a" or _
			LCase(penultima) = "e" or _
			LCase(penultima) = "i" or _
			LCase(penultima) = "o" or _
			LCase(penultima) = "u") then
			Plural = Mid(Nombre, 1, Len(Nombre) - 1) + "es" + ultima
		else
			Plural = Mid(Nombre, 1, Len(Nombre) - 1) + "s" + ultima
		end if
	else
		if LCase(ultima) = "y" then
			Plural = Nombre + "ies"
		else
			Plural = Nombre + "s"
		end if
	end if

end function

'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " And Not Char = "." Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetDataType (tipo)
	Dim retVal
	Select Case tipo 
		Case "varchar"
			GetDataType = "string"
		Case "text"
			GetDataType = "string"
		Case "date"
			GetDataType = "DateTime"
		Case "bool"
			GetDataType = "bool"
		Case "char"
			GetDataType = "Char"
		Case "date"
			GetDataType = "DateTime"
		Case "float4"
			GetDataType = "float"
		Case "float8"
			GetDataType = "double"
		Case "int2"
			GetDataType = "short"
		Case "int4"
			GetDataType = "int"
		Case "int8"
			GetDataType = "long"
		Case "numeric"
			GetDataType = "Decimal"
		Case "money"
			GetDataType = "Decimal"
		Case "time"
			GetDataType = "DateTime"
		Case "timestamp"
			GetDataType = "DateTime"
		Case "bigint"
			GetDataType = "long"
		Case "decimal"
			GetDataType = "Decimal"
		Case Else
			GetDataType = ""
	End Select
End Function

Function ToProperty (name)
	
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)
	upper = 1

	For j = 1 To l			
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			upper = 1
		Else
			If (upper = 1) Then
				str = str & UCase(char)
				upper = 0
			Else 
				str = str & LCase(char)
			End If
		End If
	Next
	ToProperty = str
	
End Function

Function ToClassName (name)
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)
	j = 3

	While j <= l
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			j = j + 1
			char = Mid(tname, j, 1)
		End If
		str = str & char
		j = j + 1 
	Wend
	
	ToClassName = str
	
End Function

%>
##|BODY_END
