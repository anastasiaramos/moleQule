##|TYPE Template
##|UNIQUEID 13f10424-0253-4004-8798-b7631b6a1c6f
##|TITLE Skin06.EntityMngForm
##|NAMESPACE moleQule.Face
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim lstRelateds
Dim txtNamespace
Dim chk

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title = "C# moleQule Skin06 EntityMngForm Template"
	ui.Width  = 380
	ui.Height = 700

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then 
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
	
	ui.AddLabel "lblNamespace", "Module: ",  "Provide your forms modules."
	Set txtNamespace = ui.AddTextBox("txtNamespace", "Project Name", "Provide your form module")			

	' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox("lstTables", "Select tables:")
	lstTables.Height = 200
	
	ui.AddLabel "lblRelateds", "Select Secondary Data:", "Select tables from the listbox below."
	Set lstRelateds = ui.AddListBox("lstRelateds", "Select Secondary Data:")
	lstRelateds.IsMultiSelect = true
	lstRelateds.Height = 150
	
	If MyMeta.DriverString = "FIREBIRD" Then
		ui.Height = ui.Height + 20
		Set chk = ui.AddCheckBox("ckDialect3", "DIALECT 3", false, "If checked, the stored procedure will use dialect 3 syntax")
		chk.forecolor = "red"
	End If

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
	
	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
	lstRelateds.BindData(db.Tables)
	txtNamespace.Text = UFirst(cmbDatabases.SelectedValue)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
	txtNamespace.Text = UFirst(cmbDatabases.SelectedValue)
End Sub

Function UFirst(name)
	Dim tname
	Dim str
	Dim char
	Dim l

	str =  UCase(Mid(name, 1, 1)) + LCase(Mid(name, 2))
	
	Ufirst = str
	
End Function
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2009, 2010 by iQ Ingenieros
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' Skin06 EntityMngForm & EntitySelectForm
' Last Update : 03/12/2012
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim props
Dim prefix
Dim trimName
Dim Foto
Dim Codigo
Dim Nombre
Dim ID
Dim isRelated
Dim objectName
Dim lista

Dim IDbCommand
Dim IDataParameter
Dim ParameterPrefix

Dim dialect

dialect = 1
If input.Item("ckDialect3") Then
	dialect = 3
End If

prefix = input.Item("prefix")
trimName = input.Item("trimName")

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set TableNames = input.Item("lstTables")
Set SecNames = input.Item("lstRelateds")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the RelatedNames the user selected and generate the business entities
For intLp = 0 To TableNames.Count - 1

	Set objTable = database.Tables(TableNames.item(intLp))
	Set props = objTable.Properties

	objectName = ToClassName(objTable.Alias)
	lista = Plural(objectName)
	
	isRelated = (SecNames.Count > 0)
	
	Codigo = false
	Foto = false
	Nombre = false
	ID = false
	
	For each objColumn in objTable.Columns
		if UCase(objColumn.Alias) = "CODIGO" then Codigo = true	End If
		if UCase(objColumn.Alias) = "FOTO" then Foto = true	End If
		if UCase(objColumn.Alias) = "NOMBRE" then Nombre = true	End If
		if UCase(objColumn.Alias) = "ID" then ID = true	End If
	Next
	
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a EntityMngForm from, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Forms;

using Csla;
using CslaEx;

using moleQule.Library;
using moleQule.Library.<%=namespace%>;
using moleQule.Library.<%=namespace%>.Reports;
using moleQule.Face;

namespace moleQule.Face.<%=namespace%>
{
    public partial class <%=objectName%>MngForm : <%=objectName%>MngBaseForm
    {
        #region Attributes & Properties
		
        public const string ID = "<%=objectName%>MngForm";
		public static Type Type { get { return typeof(<%=objectName%>MngForm); } }
		public override Type EntityType { get { return typeof(<%=objectName%>); } }

		protected override int BarSteps { get { return base.BarSteps + <%= 2 + SecNames.Count %>; } }
		<%	For each table in SecNames %>
		<%= ToClassName(table)%>List _<%=LCase(Plural(table))%>;
		<%	Next %>
		
		public <%=objectName%> _entity;
		
		#endregion
		
		#region Factory Methods

		public <%=objectName%>MngForm()
            : this(null) {}
			
		public <%=objectName%>MngForm(Form parent)
			: this(false, parent) {}
		
		public <%=objectName%>MngForm(bool isModal, Form parent)
			: this(isModal, parent, null) {}
		
		public <%=objectName%>MngForm(bool isModal, Form parent, <%=objectName%>List list)
			: base(isModal, parent, list)
		{
			InitializeComponent();

			SetView(molView.Normal);

            // Parche para poder abrir el formulario en modo diseño y no perder la configuracion de columnas
            DatosLocal_BS = Datos;
            Tabla.DataSource = DatosLocal_BS;
			
			SetMainDataGridView(Tabla); 
			Datos.DataSource = <%=objectName%>List.NewList().GetSortedList();
			SortProperty = Codigo.DataPropertyName;
        }
		
		#endregion
		
		#region Authorization

		/// <summary>Aplica las reglas de validación de usuarios al formulario.
		/// <returns>void</returns>
		/// </summary>
		protected override void ApplyAuthorizationRules() {}
		
		protected override void ActivateAction(molAction action, bool state)
		{
			if (EntityType == null) return;

			switch (action)
			{
				default: 
					base.ActivateAction(action, state); 
					break;
			}
		}

		#endregion

		#region Style & Format

		public override void FitColumns()
		{
			List<DataGridViewColumn> cols = new List<DataGridViewColumn>();
			Nombre.Tag = 1;
			
			cols.Add(Nombre);

			ControlsMng.MaximizeColumns(Tabla, cols);
		}
		
		public override void FormatControls()
		{
            if (Tabla == null) return;
			
			base.FormatControls();
		}
		
		protected override void SetRowFormat(DataGridViewRow row)
        {
            /*if (row.IsNewRow) return;
            
			<%=objectName%>Info item = (<%=objectName%>Info)row.DataBoundItem;
			
			Face.Common.ControlTools.Instance.SetRowColor(row, item.EEstado);*/
        }
		
		protected override void SetView(molView view)
		{
			base.SetView(view);

			switch (_view_mode)
			{
				case molView.Select:

					break;

				case molView.Normal:

					break;
			}
		}
		
		#endregion

		#region Source
		
		protected override void RefreshMainData()
		{
			PgMng.Grow(string.Empty, "<%=objectName%>");
			
			long oid = ActiveOID;
			<%	For each table in SecNames
			%>_<%= LCase(Plural(table))%> = <%=ToClassName(table)%>List.GetList(false);
			PgMng.Grow("Lista de <%=Plural(table)%>");
			<% Next %>
			
			switch (DataType)
            { 
                case EntityMngFormTypeData.Default:
                    List = <%=objectName%>List.GetList(false);
                    break;						
            } 
			PgMng.Grow(string.Empty, "Lista de <%=Plural(objectName)%>");
		}
		
        public override void UpdateList()
        {
            switch (_current_action)
            {
                case molAction.Add:
				case molAction.Copy:
                    if (_entity == null) return;
                    List.AddItem(_entity.GetInfo(false));
                    if (FilterType == IFilterType.Filter)
                    {
                        <%=objectName%>List listA = <%=objectName%>List.GetList(_filter_results);
                        listA.AddItem(_entity.GetInfo(false));
                        _filter_results = listA.GetSortedList();
                    }					
                    break;

                case molAction.Edit:
				case molAction.Lock:
                case molAction.Unlock:
				case molAction.ChangeStateAnulado:
                    if (_entity == null) return;
                    ActiveItem.CopyFrom(_entity);
                    break;

                case molAction.Delete:
                    if (ActiveItem == null) return;
                    List.RemoveItem(ActiveOID);
                    if (FilterType == IFilterType.Filter)
                    {
                        <%=objectName%>List listD = <%=objectName%>List.GetList(_filter_results);
                        listD.RemoveItem(ActiveOID);
                        _filter_results = listD.GetSortedList();
                    }
                    break;
            }

			RefreshSources();
			if (_entity != null) Select(_entity.Oid);
			_entity = null;
        }	
		
		#endregion

        #region Actions

        public override void OpenAddForm()
        {
			<%=objectName%>AddForm form = new <%=objectName%>AddForm(this);
			AddForm(form);
			if (form.ActionResult == DialogResult.OK) _entity = form.Entity;
		}

		public override void OpenViewForm() { AddForm(new <%=objectName%>ViewForm(ActiveOID, this)); }

        public override void OpenEditForm() 
        {             
			<%=objectName%>EditForm form = new <%=objectName%>EditForm(ActiveOID, this);
			if (form.Entity != null)
			{
				AddForm(form);
				_entity = form.Entity;
			}
		}

		public override void DeleteObject(long oid)
		{
			<% If Foto Then 
			%>//Se elimina la foto
			Images.Delete(List.GetItem(oid).Foto, Controler.FOTOS_<%=UCase(Plural(objectName))%>_PATH);
			<% End if %>
			<%=objectName%>.Delete(oid);
			_action_result = DialogResult.OK;
		}

		/// <summary>Duplica un objeto y abre el formulario para editar item
		/// <returns>void</returns>
		/// </summary>
		/*public override void DuplicateObject(long oid) 
		{
			<%=objectName%> old = <%=objectName%>.Get(oid);
			<%=objectName%> dup = old.CloneAsNew();
			old.CloseSession();
			<% If Foto Then
			%>dup.Foto = string.Empty;
			<% End If %>
			AddForm(new <%=objectName%>AddForm(dup));

		}*/

		/// <summary>Imprime la lista del objetos
		/// <returns>void</returns>
		/// </summary>
		public override void PrintList() 
		{
			/*
			PgMng.Reset(3, 1, Face.Resources.Messages.LOADING_DATA, this);
			
			<%=objectName%>ReportMng reportMng = new <%=objectName%>ReportMng(AppContext.ActiveSchema);
			
			PgMng.Grow(Face.Resources.Messages.BUILDING_REPORT);			
			<%=objectName%>ListRpt report = reportMng.GetListReport(List);
			
			PgMng.FillUp();
			
			ShowReport(report);
			*/
		}
		
		#endregion
    }
	
	public partial class <%=objectName%>MngBaseForm : Skin06.EntityMngSkinForm<<%=objectName%>List, <%=objectName%>Info>
	{
		public <%=objectName%>MngBaseForm()
			: this(false, null, null) { }

		public <%=objectName%>MngBaseForm(bool isModal, Form parent, <%=objectName%>List list)
			: base(isModal, parent, list) { }
	}
}
<% 
' Save the output file for this Table
SaveAs("MngForm.cs")

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Buiding the EntityMngForm.Designer.cs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>namespace moleQule.Face.<%=namespace%>
{
    partial class <%=objectName%>MngForm 
    {
        /// <summary>
        /// Variable del diseñador requerida.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Limpiar los recursos que se estén utilizando.
        /// </summary>
        /// <param name="disposing">true si los recursos administrados se deben eliminar; false en caso contrario, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Código generado por el Diseñador de Windows Forms

        /// <summary>
        /// Método necesario para admitir el Diseñador. No se puede modificar
        /// el contenido del método con el editor de código.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle5 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle2 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle3 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle4 = new System.Windows.Forms.DataGridViewCellStyle();
            this.DatosLocal_BS = new System.Windows.Forms.BindingSource(this.components);
            this.Tabla = new System.Windows.Forms.DataGridView();
			<%	
			For each objColumn in objTable.Columns
				Select Case UCase(objColumn.Alias) 
					Case "CODIGO" output.writeln("			this.Codigo = new System.Windows.Forms.DataGridViewTextBoxColumn();") 
		 			Case "ID" output.writeln("			this.Id" & objectName & " = new System.Windows.Forms.DataGridViewTextBoxColumn();") 
		 			Case "NOMBRE" output.writeln("			this.Nombre = new System.Windows.Forms.DataGridViewTextBoxColumn();")
		 		End Select 
			Next %>
			this.Main_Panel.Panel1.SuspendLayout();
			this.Main_Panel.Panel2.SuspendLayout();
			this.Main_Panel.SuspendLayout();
			this.Letras_Panel.SuspendLayout();
			this.Campos_Panel.SuspendLayout();
			this.Content_Panel.Panel1.SuspendLayout();
			this.Content_Panel.SuspendLayout();
			this.Search_Panel.Panel1.SuspendLayout();
			this.Search_Panel.Panel2.SuspendLayout();
			this.Search_Panel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.Datos)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.DatosSearch)).BeginInit();
			this.Progress_Panel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.Animation)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.DatosLocal_BS)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.Tabla)).BeginInit();
			this.SuspendLayout();
			// 
			// Fields_CB
			// 
			this.Fields_CB.DisplayMember = "HeaderText";
			this.HelpProvider.SetShowHelp(this.Fields_CB, true);
			this.Fields_CB.ValueMember = "DataPropertyName";
            // 
            // DatosLocal_BS
            // 
            this.DatosLocal_BS.DataSource = typeof(moleQule.Library.<%= namespace %>.<%=objectName%>List);
            // 
            // Tabla
            // 
            this.Tabla.AutoGenerateColumns = false;
            this.Tabla.BackgroundColor = System.Drawing.SystemColors.ControlLight;
            dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle1.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            dataGridViewCellStyle1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.Tabla.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            this.Tabla.ColumnHeadersHeight = 34;
            this.Tabla.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
			<%	
			For each objColumn in objTable.Columns
				Select Case UCase(objColumn.Alias) 
					Case "CODIGO" output.writeln("			this.Codigo,") 
		 			Case "ID" output.writeln("			this.Id" + objectName + ",") 
		 			Case "NOMBRE" output.writeln("			this.Nombre,")
		 		End Select 
			Next
			%>
			});
            this.Tabla.DataSource = this.DatosLocal_BS;
            dataGridViewCellStyle5.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle5.BackColor = System.Drawing.SystemColors.Window;
            dataGridViewCellStyle5.Font = new System.Drawing.Font("Tahoma", 8.25F);
            dataGridViewCellStyle5.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            dataGridViewCellStyle5.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle5.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle5.WrapMode = System.Windows.Forms.DataGridViewTriState.False;
            this.Tabla.DefaultCellStyle = dataGridViewCellStyle5;
            this.Tabla.Dock = System.Windows.Forms.DockStyle.Fill;
            this.Tabla.EditMode = System.Windows.Forms.DataGridViewEditMode.EditOnKeystroke;
            this.Tabla.Location = new System.Drawing.Point(0, 0);
			this.Tabla.MultiSelect = false;
            this.Tabla.Name = "Tabla";
            this.Tabla.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.Tabla.Size = new System.Drawing.Size(722, 529);
            this.Tabla.TabIndex = 0;
			<%	
			For each objColumn in objTable.Columns
				Select Case UCase(objColumn.Alias) 
					Case "CODIGO" 
					output.writeln("			//") 
					output.writeln("			// Codigo")
					output.writeln("			//")
					output.writeln("			this.Codigo.DataPropertyName = ""Codigo"";")
					output.writeln("			dataGridViewCellStyle2.BackColor = System.Drawing.Color.White;")
					output.writeln("			this.Codigo.DefaultCellStyle = dataGridViewCellStyle2;")
					output.writeln("			this.Codigo.HeaderText = ""Codigo"";")
					output.writeln("			this.Codigo.Name = ""Codigo"";")
					output.writeln("			this.Codigo.ReadOnly = true;") 
		 			Case "ID" 
					output.writeln("			//") 
					output.writeln("			// Id" + objectName)
					output.writeln("			//")
					output.writeln("			this.Id" + objectName + ".DataPropertyName = ""Id"";")
					output.writeln("			dataGridViewCellStyle2.BackColor = System.Drawing.Color.White;")
					output.writeln("			this.Id" + objectName + ".DefaultCellStyle = dataGridViewCellStyle2;")
					output.writeln("			this.Id" + objectName + ".HeaderText = ""CIF / NIF"";")
					output.writeln("			this.Id" + objectName + ".Name = ""Id" + objectName + """;")
					output.writeln("			this.Id" + objectName + ".ReadOnly = true;") 
		 			Case "NOMBRE" 
					output.writeln("			//") 
					output.writeln("			// Nombre")
					output.writeln("			//") 
					output.writeln("			this.Nombre.DataPropertyName = ""Nombre"";")
					output.writeln("			dataGridViewCellStyle2.BackColor = System.Drawing.Color.White;")
					output.writeln("			this.Nombre.DefaultCellStyle = dataGridViewCellStyle2;")
					output.writeln("			this.Nombre.HeaderText = ""Nombre"";")
					output.writeln("			this.Nombre.Name = ""Nombre"";")
					output.writeln("			this.Nombre.ReadOnly = true;") 		
		 		End Select 
			Next%>
            this.Tabla.DoubleClick += new System.EventHandler(this.Tabla_DoubleClick);
			this.Tabla.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Tabla_KeyPress);
            this.Tabla.ColumnHeaderMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.Tabla_ColumnHeaderMouseClick);
            this.Tabla.CellClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.Tabla_CellClick);
			this.Tabla.RowPrePaint += new System.Windows.Forms.DataGridViewRowPrePaintEventHandler(this.Tabla_RowPrePaint);
			// 
			// Content_Panel
			// 
			// 
			// Content_Panel.Panel1
			// 
			this.Content_Panel.Panel1.Controls.Add(this.Tabla);
			this.HelpProvider.SetShowHelp(this.Content_Panel.Panel1, true);
			// 
			// Content_Panel.Panel2
			// 
			this.HelpProvider.SetShowHelp(this.Content_Panel.Panel2, true);
			this.HelpProvider.SetShowHelp(this.Content_Panel, true);
			this.Content_Panel.Size = new System.Drawing.Size(1008, 616);
			this.Content_Panel.SplitterDistance = 588;
			// 
            // <%=objectName%>MngForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 13F);
			this.ClientSize = new System.Drawing.Size(1008, 682);
            this.HelpProvider.SetHelpKeyword(this, "30");
            this.HelpProvider.SetHelpNavigator(this, System.Windows.Forms.HelpNavigator.TopicId);
            this.Name = "<%=objectName%>MngForm";
            this.HelpProvider.SetShowHelp(this, true);
			this.Text = "<%=lista%>";
			this.Controls.SetChildIndex(this.ProgressInfo_PB, 0);
			this.Controls.SetChildIndex(this.ProgressBK_Panel, 0);
			this.Controls.SetChildIndex(this.Main_Panel, 0);
			this.Controls.SetChildIndex(this.Progress_PB, 0);
			this.Main_Panel.Panel1.ResumeLayout(false);
			this.Main_Panel.Panel1.PerformLayout();
			this.Main_Panel.Panel2.ResumeLayout(false);
			this.Main_Panel.ResumeLayout(false);
			this.Letras_Panel.ResumeLayout(false);
			this.Letras_Panel.PerformLayout();
			this.Campos_Panel.ResumeLayout(false);
			this.Campos_Panel.PerformLayout();
			this.Content_Panel.Panel1.ResumeLayout(false);
			this.Content_Panel.ResumeLayout(false);
			this.Search_Panel.Panel1.ResumeLayout(false);
			this.Search_Panel.Panel2.ResumeLayout(false);
			this.Search_Panel.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.Datos)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.DatosSearch)).EndInit();
			this.Progress_Panel.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.Animation)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.DatosLocal_BS)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.Tabla)).EndInit();
			this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.BindingSource DatosLocal_BS;
        private System.Windows.Forms.DataGridView Tabla;
		<%	For each objColumn in objTable.Columns
				Select Case UCase(objColumn.Alias) 
					Case "CODIGO" output.writeln("		private System.Windows.Forms.DataGridViewTextBoxColumn Codigo;") 
		 			Case "ID" output.writeln("		private System.Windows.Forms.DataGridViewTextBoxColumn Id" + objectName + ";") 
		 			Case "NOMBRE" output.writeln("		private System.Windows.Forms.DataGridViewTextBoxColumn Nombre;")
		 		End Select 
			Next %>
    }
}
<% 
	' Save the output file for this Table
	SaveAs("MngForm.Designer.cs")

	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	' Buiding the SelectForm.cs
	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>using System;
using System.Windows.Forms;

using moleQule.Library.<%=namespace%>;

namespace moleQule.Face.<%=namespace%>
{
    public partial class <%=objectName%>SelectForm : <%=objectName%>MngForm
    {

        #region Factory Methods

        public <%=objectName%>SelectForm()
            : this(null) {}

        public <%=objectName%>SelectForm(Form parent)
            : this(parent, null) {}
		
		public <%=objectName%>SelectForm(Form parent, <%=objectName%>List list)
            : base(true, parent, list)
        {
            InitializeComponent();
			
			SetView(molView.Select);
			
            DialogResult = DialogResult.Cancel;
        }
		
        #endregion

        #region Style & Source

        /// <summary>Formatea los controles del formulario
        /// <returns>void</returns>
        /// </summary>
        public override void FormatControls()
        {
            SetSelectView();
            base.FormatControls();
        }

        #endregion

        #region Actions

        /// <summary>
        /// Accion por defecto. Se usa para el Double_Click del Grid
        /// <returns>void</returns>
        /// </summary>
        protected override void DefaultAction() { ExecuteAction(molAction.Select); }

        #endregion
    }
}
<%

	' Save the output file for this Table
	SaveAs("SelectForm.cs")

	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	' Buiding the SelectForm.Designer.cs
	'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%>namespace moleQule.Face.<%=namespace%>
{
    partial class <%=objectName%>SelectForm
    {
        /// <summary>
        /// Variable del diseñador requerida.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Limpiar los recursos que se estén utilizando.
        /// </summary>
        /// <param name="disposing">true si los recursos administrados se deben eliminar; false en caso contrario, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Código generado por el Diseñador de Windows Forms

        /// <summary>
        /// Método necesario para admitir el Diseñador. No se puede modificar
        /// el contenido del método con el editor de código.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
        }

        #endregion
    }
}
<%

	' Save the output file for this Table
	SaveAs("SelectForm.Designer.cs")

Next '  tableName
	
output.write buffer

'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================

Function ToClassName (name)
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)
	j = 1

	'Si es auxiliar estará todo el nombre en mayúsculas
	if (name = UCase(name)) Then
		tname = UCase(Mid(name, 1, 1)) + LCase(Mid(name, 2))
	Else
		tname = UCase(Mid(name, 1, 1)) + Mid(name, 2)
	End If
	
	While j <= l
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			j = j + 1
			char = Mid(tname, j, 1)
		End If
		str = str & char
		j = j + 1 
	Wend
	
	ToClassName = str
	
End Function

Function Plural(Nombre)
	
	Dim ultima
	Dim penultima
	
	ultima = Mid(Nombre, Len(Nombre), 1)
	
	'Si acaba en Mayusculas
	if (ultima = UCase(ultima)) then
		penultima = Mid(Nombre, Len(Nombre)-1, 1)
		if not (LCase(penultima) = "a" or _
			LCase(penultima) = "e" or _
			LCase(penultima) = "i" or _
			LCase(penultima) = "o" or _
			LCase(penultima) = "u") then
			Plural = Mid(Nombre, 1, Len(Nombre) - 1) + "es" + ultima
		else
			Plural = Mid(Nombre, 1, Len(Nombre) - 1) + "s" + ultima
		end if
	else
		if not (LCase(ultima) = "a" or _
				LCase(ultima) = "e" or _
				LCase(ultima) = "i" or _
				LCase(ultima) = "o" or _
				LCase(ultima) = "u") then
			Plural = Nombre + "es"
		else
			Plural = Nombre + "s"
		end if
	end if

end function

Function SaveAs (name)
	
	' Save the output file for this Table
	filename = input.item("txtPath")

	length = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = length Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		If trimName = True Then
			filename = filename & "_" & ToProperty(TrimSpaces(objectName)) & name
		Else
			filename = filename & "_" & objectName & name
		End If
	Else 
		If trimName = True Then
			filename = filename & objectName & name
		Else
			filename = filename & objectName & name
		End If
	End If

	output.save filename, false
	buffer = buffer & output.text
	output.clear

End Function
%>
##|BODY_END
