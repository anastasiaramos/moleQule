##|TYPE Template
##|UNIQUEID 70c12c96-9231-44db-a10f-17ffc68b6f88
##|TITLE Root_BusinessBaseEx
##|NAMESPACE dOOdads.C#
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|COMMENTS_BEGIN
From a Table, MS SQL, MS Access, Firebird, PostgreSQL, Oracle with aggregate support.
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim lstChilds
Dim chk

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title = "Generate C# dOOdads"
	ui.Width  = 380
	ui.Height = 640

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then 
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
	
	ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
	ui.AddTextBox "txtNamespace", "Your.Namespace", "Provide your objects namespace."			

	' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
	'lstTables.IsMultiSelect = false
	lstTables.Height = 120
	
	ui.AddLabel "lblChilds", "Select childs:", "Select tables from the listbox below."
	Set lstChilds = ui.AddListBox ("lstChilds", "Select childs:")
	lstTables.IsMultiSelect = true
	lstChilds.Height = 120
	
	Set prefix = ui.AddCheckBox("prefix", "Prefix the 'File' with an underscore?", false, "If checked, the file on disk will begin with an underscore")
	Set trimName = ui.AddCheckBox("trimName", "Trim spaces from output filename?", false, "If checked, the file on disk will have spaces trimmed from the name.")
	
	If MyMeta.DriverString = "FIREBIRD" Then
		ui.Height = ui.Height + 20
		Set chk = ui.AddCheckBox("ckDialect3", "DIALECT 3", false, "If checked, the stored procedure will use dialect 3 syntax")
		chk.forecolor = "red"
	End If

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
	
	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
	lstChilds.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2004, 2005 by MyGeneration Software
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' BusinessBaseEx_PadreConHijos.vbgen
' Last Update : 28/11/2008
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objTable
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim props
Dim prefix
Dim trimName
Dim childNames

Dim Schema

Dim IDbCommand
Dim IDataParameter
Dim ParameterPrefix

Dim dialect

dialect = 1
If input.Item("ckDialect3") Then
	dialect = 3
End If

prefix = input.Item("prefix")
trimName = input.Item("trimName")

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")
Set childNames = input.Item("lstChilds")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))
	Set props = objTable.Properties
	Schema = objTable.Schema
	if (Schema = "COMMON") Then
		Schema = "CommonSchema"
	else
		Schema = "ActiveSchema.Code"
	end if

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;

using Csla;
using Csla.Validation;
using CslaEx;

using moleQule.Library;

using NHibernate;

namespace <%= namespace %>
{

	/// <summary>
	/// Editable Root Business Object With Editable Child Collection
	/// </summary>
    [Serializable()]
	public class <%= ToClassName(objTable.Alias) %> : <%= "BusinessBaseEx<" + ToClassName(objTable.Alias) + ">" %>
	{
	 
		#region Business Methods
		
		<%	For Each objColumn in objTable.Columns
				name = LCase(objColumn.Name)
				If (name <> "oid") Then
					if InStr(name, "oid") = 1 then
						tipo = "long"
					else
						tipo = GetDataType(objColumn.DataTypeName)
					end if
					name = "_" & name %>
		private <%= tipo & " " & name %><%
					If (tipo = "string") Then
					%> = string.Empty<%
					End If
					If (tipo = "bool") Then 
					%> = false<%
					End If
					%>;<%
				End If
			Next %>
		<% 	For each ChildName in ChildNames %>
		private <%= ToProperty(ChildName)+ GetLetraS(childName) %> _<%= LCase(ChildName)+ GetLetraS(childName) %> = <%= ToProperty(ChildName)+ GetLetraS(childName) %>.NewChildList();<%
				Next
			%>
			<%For Each objColumn in objTable.Columns
			name = GetAlias(objColumn)
			If (name <> "OID") Then
				tipo = GetDataType(objColumn.DataTypeName)%>
		public virtual <%= tipo & " " & ToProperty(name) %>
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _<%= LCase(name) %>;
			}
            
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				<%
				If (tipo = "string") Then %>
					if (value == null) value = string.Empty;
				<% End If %>
				if (!_<%= LCase(name) %> .Equals(value))
				{
					_<%= LCase(name) %> = value;
					PropertyHasChanged();
				}
			}
		}
		<% End If
		Next %>
		
		<%For Each childName in ChildNames %>
		public virtual <%= ToProperty(childName)+ GetLetraS(childName) %> <%= ToProperty(childName)+ GetLetraS(childName) %>
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _<%= LCase(ChildName) + GetLetraS(childName)%>;
			}
		}
		<% Next %>
			 
			 
		public override bool IsValid
		{
			get { return base.IsValid<% for each childName in ChildNames %>
						 && _<%= LCase(childName)+ GetLetraS(childName)%>.IsValid<% Next %> ; }
		}
		
		//Para añadir una lista: || _lista.IsDirty
		public override bool IsDirty
		{
			get { return base.IsDirty<% for each childName in ChildNames %>
						 || _<%= LCase(childName)+ GetLetraS(childName)%>.IsDirty<% Next %> ; }
		}
		
		/// <summary>
		/// Clona la entidad y sus subentidades y las marca como nuevas
		/// </summary>
		/// <returns>Una entidad clon</returns>
			
		public virtual <%= ToClassName(objTable.Alias) %> CloneAsNew()
		{
			<%= ToClassName(objTable.Alias) %> clon = base.Clone();
			
			//Se definen el Oid y el Coidgo como nueva entidad
			Random rd = new Random();
			clon.Oid = rd.Next();
			
			<% 
			for each objColumn in objTable.Columns
				if UCase(objColumn) = "CODIGO" then
			%>clon.Codigo = (0).ToString(Resources.Defaults.<%= UCase(objTable.Alias) %>_CODE_FORMAT);
			<%	end if
			next
			%>clon.SessionCode = <%= ToClassName(objTable.Alias) %>.OpenSession();
			<%= ToClassName(objTable.Alias) %>.BeginTransaction(clon.SessionCode);
			
			clon.MarkNew();
			<% for each ChildName in ChildNames %>clon.<%= ToProperty(ChildName)+ GetLetraS(childName) %>.MarkAsNew();
			<% Next %>
			return clon;
		}
			
		public void CopyFrom (<%= ToProperty(objTable.Alias) %> source)
		{
			CopyValues(source);
		}
		
		public void CopyFrom (<%= ToProperty(objTable.Alias) %>Info source)
		{
			if (source == null) return;
			<%
			For Each objColumn in objTable.Columns
				name = GetAlias(objColumn)
				attr = "_" & LCase(name)
			%><%= attr %> = source.<%= ToProperty(name) %>;
			<%
			Next
			%>
		}

		/// <summary>
		/// Copia los atributos del objeto
		/// </summary>
		/// <param name="source">Objeto origen</param>
		protected override void CopyValues (<%= ToClassName(objTable.Alias) %> source)
		{
			if (source == null) return;
			<%
			For Each objColumn in objTable.Columns
				name = GetAlias(objColumn)
				attr = "_" & LCase(name)
			%><%= attr %> = source.<%= ToProperty(name) %>;
			<%
			Next
			%>
		}
		
		protected override object GetIdValue() { return _oid; }
		
		/// <summary>
        /// Devuelve el siguiente código de <%= ToClassName(objTable.Alias) %>.
        /// </summary>
        /// <returns></returns>
        public static string GetNewCode()
        {
			Int64 lastcode = <%= ToClassName(objTable.Alias) %>.GetNewSerial();

            // Devolvemos el siguiente codigo de <%= ToClassName(objTable.Alias) %> 
            return lastcode.ToString(Resources.Defaults.<%= UCase(objTable.Alias) %>_CODE_FORMAT);
        }		
		
		/// <summary>
        /// Devuelve el siguiente Serial de <%= ToClassName(objTable.Alias) %>
        /// </summary>
        /// <returns></returns>
        private static Int64 GetNewSerial()
        {
            // Obtenemos la lista de clientes ordenados por serial
            SortedBindingList<<%= ToClassName(objTable.Alias) %>Info> <%= ToClassName(objTable.Alias) %>s =
                <%= ToClassName(objTable.Alias) %>List.GetSortedList("Serial", ListSortDirection.Ascending);

            // Obtenemos el último serial de servicio
            Int64 lastcode;

            if (<%= ToClassName(objTable.Alias) %>s.Count > 0)
                lastcode = <%= ToClassName(objTable.Alias) %>s[<%= ToClassName(objTable.Alias) %>s.Count - 1].Serial;
            else
                lastcode = Convert.ToInt64(Resources.Defaults.<%= UCase(objTable.Alias) %>_CODE_FORMAT);

            lastcode++;
            return lastcode;
        }
			
			
		#endregion
		 
	    #region Validation Rules
		 
		//región a rellenar si hay campos requeridos
		 
		#endregion
		 
		#region Autorization Rules
		 
		public static bool CanAddObject()
		{
			return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= UCase(objTable.Alias) %>);
		}
		
		public static bool CanGetObject()
		{
			return ApplicationContextEx.User.CanReadObject(Resources.ElementosSeguros.<%= UCase(objTable.Alias) %>);
		}
		
		public static bool CanDeleteObject()
		{
			return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= UCase(objTable.Alias) %>);
		}
		
		public static bool CanEditObject()
		{
			return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= UCase(objTable.Alias) %>);
		}
		 
		#endregion
		 
		#region Factory Methods
		 
		/// <summary>
		/// NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New
		/// Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
		/// pero es protected por exigencia de NHibernate.
		/// </summary>
		protected <%= ToClassName(objTable.Alias) %> () {}
			
		private <%= ToClassName(objTable.Alias) %> (IDataReader reader)
		{
			Fetch(reader);
		}
			
		public static <%= ToClassName(objTable.Alias) %> New()
		{
			if (!CanAddObject())
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);
			
			return DataPortal.Create<%= "<" & ToClassName(objTable.Alias) & ">" %>(new CriteriaCs(-1));
		}
			
		public static <%= ToClassName(objTable.Alias) %> Get(long oid)
		{
			if (!CanGetObject())
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);
			
			CriteriaEx criteria = <%= ToClassName(objTable.Alias) %>.GetCriteria(<%= ToClassName(objTable.Alias) %>.OpenSession());
		
			if (nHManager.Instance.UseDirectSQL)
				criteria.Query = <%= ToClassName(objTable.Alias) %>.SELECT(AppContext.<%output.write schema %>, oid);
			else
				criteria.AddOidSearch(oid);
			
			<%= ToClassName(objTable.Alias) %>.BeginTransaction(criteria.Session);
			
			return DataPortal.Fetch<%= "<" & ToClassName(objTable.Alias) & ">" %>(criteria);
		}
		
		internal static <%= ToClassName(objTable.Alias) %> Get(IDataReader reader)
		{
			return new <%= ToClassName(objTable.Alias) %>(reader);
		}
			
		/// <summary>
		/// Construye y devuelve un objeto de solo lectura copia de si mismo.
		/// </summary>
		/// <param name="get_childs">True si se quiere que traiga los hijos</param>
		/// <returns></returns>
		public virtual <%= ToClassName(objTable.Alias) %>Info GetInfo (bool get_childs)
		{
			if (!CanGetObject())
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);
			
			if (get_childs)
				return new <%= ToClassName(objTable.Alias) %>Info(this, true);
			else
				return new <%= ToClassName(objTable.Alias) %>Info(this);
		}
		
		public virtual <%= ToClassName(objTable.Alias) %>Info GetInfo()
		{
			return GetInfo(true);
		}
		
		/// <summary>
		/// Borrado inmediato, no cabe "undo"
		/// (La función debe ser "estática")
		/// </summary>
		/// <param name="oid"></param>
		public static void Delete(long oid)
		{
			if (!CanDeleteObject())
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);
			
			DataPortal.Delete(new CriteriaCs(oid));
		}
		
		/// <summary>
		/// Elimina todos los <%= ToClassName(objTable.Alias) %>. 
		/// Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
		/// </summary>
		public static void DeleteAll()
		{
			//Iniciamos la conexion y la transaccion
			int sessCode = <%= ToClassName(objTable.Alias) %>.OpenSession();
			ISession sess = <%= ToClassName(objTable.Alias) %>.Session(sessCode);
			ITransaction trans = <%= ToClassName(objTable.Alias) %>.BeginTransaction(sessCode);
			
			try
			{	
				sess.Delete("from <%= ToClassName(objTable.Alias) %>");
				trans.Commit();
			}
			catch (Exception ex)
			{
				if (trans != null) trans.Rollback();
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}
			finally
			{
				<%= ToClassName(objTable.Alias) %>.CloseSession(sessCode);
			}
		}
		
		public override <%= ToClassName(objTable.Alias) %> Save()
		{
			// Por la posible doble interfaz Root/Child
			if (IsChild) throw new iQException(Resources.Messages.CHILD_SAVE_NOT_ALLOWED);
			
			bool success = false;
			
			if (IsDeleted && !CanDeleteObject())
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);
			else if (IsNew && !CanAddObject())
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);
			else if (!CanEditObject())
			{
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);
			}
			try
			{
				ValidationRules.CheckRules();
				
				if (!IsValid)
                    throw new iQValidationException(Resources.Messages.GENERIC_VALIDATION_ERROR);
				
				base.Save();
				
				<% For each ChildName in ChildNames 
				%>_<%= LCase(ChildName)+ GetLetraS(childName) %>.Update(this);
				<% Next %>
				
				Transaction().Commit();
				success = true;
				return this;
			}
			catch (iQValidationException ex)
			{
				//Child Validation
				throw new iQValidationException(ex.Message, ex.SysMessage);
			}
			catch (ValidationException ex)
			{
				//Object Validation
				throw new iQValidationException(Resources.Messages.GENERIC_VALIDATION_ERROR, ex.Message);
			}
			catch (Exception ex)
			{
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}
			finally
			{
				if (!success)
					if (Transaction() != null) 
						Transaction().Rollback();
				
				// Se abre la nueva transacción para bloquear el objeto
				BeginTransaction();
			}
		}
				
		#endregion
		
		#region Common Data Access
		 
		[RunLocal()]
		private void DataPortal_Create(CriteriaCs criteria)
		{
			Random r = new Random();
			_oid = (long)r.Next();
			<% 	for each objColumn in objTable.Columns
					if UCase(objColumn.Alias) = "CODIGO" then
			%>Codigo = (0).ToString(Resources.Defaults.<%= UCase(objColumn.Alias) %>_CODE_FORMAT);
			<% 		end if
				next %>
			
			<% 	For each ChildName in ChildNames %>
			_<%= LCase(ChildName)+ GetLetraS(childName) %> = Library.<%= ToProperty(ChildName)+ GetLetraS(childName) %>.NewChildList();
			<% 	Next	%>
			
		}
		 
		#endregion
		 
		#region Root Data Access
		 
		private void DataPortal_Fetch(CriteriaEx criteria)
		{
			try
			{
				SessionCode = criteria.SessionCode;
				Childs = criteria.Childs;
				
				if (nHMng.UseDirectSQL)
				{
					<%= ToClassName(objTable.Alias) %>.DoLOCK(AppContext.<%= Schema %>, Session());
					IDataReader reader = nHMng.SQLNativeSelect(criteria.Query, Session());
					
					if (reader.Read())
						CopyValues(reader);
					
					<% if (ChildNames.Count > 0) then%>
					if (Childs)
					{
						string query = string.Empty;
					<%end if%> 
						<% for each childName in ChildNames
							Schema = dataBase.Tables(ChildName).Schema
							if (UCase(Schema) = "COMMON") then
								Schema = "CommonSchema"
							else
								Schema = "ActiveSchema.Code"
							end if
						%>
						<%= ToProperty(childName) %>.DoLOCK(AppContext.<%= Schema %>, Session());
						query = <%= ToProperty(childName)+ GetLetraS(childName) %>.SELECT_BY_FIELD(AppContext.<%= Schema %>, "Oid<%= ToClassName(objTable.Alias)%>", this.Oid);
						reader = nHManager.Instance.SQLNativeSelect(query, Session());
						_<%= LCase(ChildName)+ GetLetraS(childName) %> = Library.<%= ToProperty(ChildName)+ GetLetraS(childName) %>.GetChildList(reader);
						<% next %>
						
 					<% if (ChildNames.Count > 0) then%>}<%end if%> 
				}
				else
				{
					Session().Lock(Session().Get<%= "<" & ToClassName(objTable.Alias) & ">" %>(Oid), LockMode.UpgradeNoWait);
					CopyValues((<%= ToClassName(objTable.Alias) %>)(criteria.UniqueResult()));
					
					<% if (ChildNames.Count > 0) then%>
					if (Childs)
					{<%end if%> 
						<% for each childName in ChildNames %>
						criteria = <%= ToProperty(childName) %>.GetCriteria(Session());
                        criteria.AddEq("Oid<%= ToClassName(objTable.Alias)%>", this.Oid);
                        _<%= LCase(ChildName)+ GetLetraS(childName) %> = Library.<%= ToProperty(childName)+ GetLetraS(childName) %>.GetChildList(criteria.List<%= "<" + ToProperty(childName) + ">" %>());
						<% next %>
					<% if (ChildNames.Count > 0) then%>}<%end if%> 
				}
				MarkOld();
			}
			catch (NHibernate.ADOException)
			{
				if (Transaction() != null) Transaction().Rollback();
				throw new iQLockException(Resources.Messages.LOCK_ERROR);
			}
			catch (Exception ex)
			{
				if (Transaction() != null) Transaction().Rollback();
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}
		}
		
		//Fetch independiente de DataPortal para generar un <%= ToClassName(objTable.Alias) %> a partir de un IDataReader
		private void Fetch(IDataReader source)
		{
			try
			{
				CopyValues(source);
			}
			catch (Exception ex)
			{
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}
		}
		 
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Insert()
		{
			try
			{
				SessionCode = OpenSession();
				BeginTransaction();
				//si hay codigo o serial, hay que obtenerlos aquí
				_serial = GetNewSerial();
				Session().Save(this);
			}
			catch (Exception ex)
			{
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Update()
		{
			if (IsDirty)
			{
				try
				{
					<%= ToClassName(objTable.Alias) %> obj = Session().Get<%= "<" & ToClassName(objTable.Alias) & ">" %>(Oid);
					obj.CopyValues(this);
					Session().Update(obj);
					MarkOld();
				}
				catch (Exception ex)
				{
					throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
				}
			}
		}
		
		//Deferred deletion
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_DeleteSelf()
		{
			DataPortal_Delete(new CriteriaCs(_oid));
		}
		
		[Transactional(TransactionalTypes.TransactionScope)]
		private void DataPortal_Delete(CriteriaCs criteria)
		{
			try
			{
				// Iniciamos la conexion y la transaccion
				SessionCode = OpenSession();
				BeginTransaction();
					
				//Si no hay integridad referencial, aquí se deben borrar las listas hijo
				CriteriaEx criterio = GetCriteria();
				criterio.AddOidSearch(criteria.Oid);
				Session().Delete((<%= ToClassName(objTable.Alias) %>)(criterio.UniqueResult()));
				Transaction().Commit();
			}
			catch (Exception ex)
			{
				if (Transaction() != null) Transaction().Rollback();
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}
			finally
			{
				CloseSession();
			}
		}
		
		
		#endregion
		 
		#region Commands
		 
		#endregion
	}
}

<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	length = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = length Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		If trimName = True Then
			filename = filename & "_" & ToProperty(TrimSpaces(objTable.Alias)) & ".cs"
		Else
			filename = filename & "_" & ToClassName(objTable.Alias) & ".cs"
		End If
	Else 
		If trimName = True Then
			filename = filename & ToClassName(objTable.Alias) & ".cs"
		Else
			filename = filename & ToClassName(objTable.Alias) & ".cs"
		End If
	End If

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer
 %>

<%

Function GetLetraS (Nombre)
	if not (LCase(Mid(Nombre, Len(Nombre), 1)) = "a" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "e" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "i" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "o" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "u") then
		GetLetraS = "es"
	else
		GetLetraS = "s"
	end if
end function

'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " And Not Char = "." Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetDataType (tipo)
	Dim retVal
	Select Case tipo 
		Case "varchar"
			GetDataType = "string"
		Case "text"
			GetDataType = "string"
		Case "date"
			GetDataType = "DateTime"
		Case "bool"
			GetDataType = "bool"
		Case "char"
			GetDataType = "Char"
		Case "date"
			GetDataType = "DateTime"
		Case "float4"
			GetDataType = "float"
		Case "float8"
			GetDataType = "double"
		Case "int2"
			GetDataType = "short"
		Case "int4"
			GetDataType = "int"
		Case "int8"
			GetDataType = "long"
		Case "numeric"
			GetDataType = "Decimal"
		Case "money"
			GetDataType = "Decimal"
		Case "time"
			GetDataType = "DateTime"
		Case "timestamp"
			GetDataType = "DateTime"
		Case "bigint"
			GetDataType = "long"
		Case "decimal"
			GetDataType = "Decimal"
		Case Else
			GetDataType = ""
	End Select
End Function

Function ToProperty (name)
	
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = TrimSpaces(name)
	l = Len(tname)
	upper = 1

	For j = 1 To l			
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			upper = 1
		Else
			If (upper = 1) Then
				str = str & UCase(char)
				upper = 0
			Else 
				str = str & LCase(char)
			End If
		End If
	Next
	ToProperty = str
	
End Function

Function ToClassName (name)
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)
	ind = 1

	For j = 1 To l			
		char = Mid(tname, j, 1)
		If (ind = 1) Then
			char = UCase(char)
		Else
			char = LCase(char)
		End If
		str = str & char
		If (char <> "_") Then 
			ind = ind + 1
		Else 
			ind = 1
		End If
	Next
	ToClassName = str
	
End Function
%>
##|BODY_END
