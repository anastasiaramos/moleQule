##|TYPE Template
##|UNIQUEID efedc49c-1f7a-44b1-85ce-9e3145e462bb
##|TITLE Root_BusinessListBaseEx
##|NAMESPACE dOOdads.C#
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|COMMENTS_BEGIN
From a Table, MS SQL, MS Access, Firebird, PostgreSQL, Oracle with aggregate support.
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim lstParent
Dim chk

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title = "Generate C# dOOdads"
	ui.Width  = 380
	ui.Height = 650

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then 
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
	
	ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
	ui.AddTextBox "txtNamespace", "Your.Namespace", "Provide your objects namespace."			

	' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
	'lstTables.IsMultiSelect = false
	lstTables.Height = 120
	
	ui.AddLabel "lblParent", "Select parents:", "Select tables from the listbox below."
	Set lstParent = ui.AddListBox ("lstParents", "Select parents:")
	lstParent.IsMultiSelect = true
	lstParent.Height = 120
	
	Set chkAux = ui.AddCheckBox ("chkAux", "Tabla Auxiliar", false, "")
	ui.Height = ui.Height + 40
	
	Set prefix = ui.AddCheckBox("prefix", "Prefix the 'File' with an underscore?", false, "If checked, the file on disk will begin with an underscore")
	Set trimName = ui.AddCheckBox("trimName", "Trim spaces from output filename?", false, "If checked, the file on disk will have spaces trimmed from the name.")
	
	If MyMeta.DriverString = "FIREBIRD" Then
		ui.Height = ui.Height + 20
		Set chk = ui.AddCheckBox("ckDialect3", "DIALECT 3", false, "If checked, the stored procedure will use dialect 3 syntax")
		chk.forecolor = "red"
	End If

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
	
	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
	lstParent.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2004, 2005 by MyGeneration Software
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' BusinessBaseEx_Root_&_Child.vbgen
' Last Update : 28/11/2008
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objTable
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim props
Dim prefix
Dim trimName

prefix = input.Item("prefix")
trimName = input.Item("trimName")

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")
Set parentNames = input.Item("lstParents")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))
	Set props = objTable.Properties
	
	Schema = objTable.Schema
	if (Schema = "COMMON") Then
		Schema = "CommonSchema"
	else
		Schema = "ActiveSchema.Code"
	end if
	
	if input.Item("chkAux") then
		auxiliar = "AUXILIAR"
	else
		auxiliar = ToProperty(objTable.Alias)
	end if
	
	if input.Item("chkAux") then
		SiAuxiliar objTable, "AUXILIARES", Schema, namespace
	else
		NoAuxiliar objTable, UCase(objTable.Alias), Schema, namespace
	end if
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
'Se llama si la tabla es auxiliar
sub SiAuxiliar (bjTable, auxiliar, Schema, namespace)
%>using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.ComponentModel;

using Csla;
using CslaEx;

using moleQule.Library;

using NHibernate;

namespace <%= namespace %>
{
    /// <summary>
    /// Editable Root Collection of Businees Objects Without Child Collection
    /// </summary>
    [Serializable()]
    public class <%= ToProperty(objTable.Alias) + GetLetraS(objTable.Alias) %> : BusinessListBaseEx<<%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>, <%= ToProperty(objTable.Alias) %>>
    {

        #region Business Methods

        /// <summary>
        /// Crea e inserta un nuevo elemento en la lista
        /// </summary>
        /// <returns>Nuevo elemento creado</returns>
        public <%= ToProperty(objTable.Alias) %> NewItem()
        {
            this.AddItem(<%= ToProperty(objTable.Alias) %>.NewChild());
            return this[Count - 1];
        }
		
		/// <summary>
        /// Comprueba si existe otro elemento con el mismo valor
        /// </summary>
        /// <param name="item">Elemento a buscar</param>
        /// <returns>Verdadero si existe</returns>
		public bool ExistOtherItem(<%= ToProperty(objTable.Alias) %> item)
        {
            <%= ToProperty(objTable.Alias) %> obj = this.GetItem(item.Oid);
            if ((obj != null) && (obj.Valor == item.Valor))
                return true;
            return false;
        }

        #endregion

        #region Authorization Rules

        public static bool CanAddObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanGetObject()
        {
            return ApplicationContextEx.User.CanReadObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanDeleteObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanEditObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        #endregion


        #region Factory Methods

        /// <summary>
        /// Crea una nueva lista
        /// </summary>
        /// <returns>Lista vacía</returns>
        private <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>() { }

        /// <summary>
        /// Obtiene una lista de todos los elementos de la base de datos
        /// </summary>
        /// <returns>Lista de objetos</returns>
        public static <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %> NewList() { return new <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>(); }

        /// <summary>
        /// Obtiene una lista de todos los elementos de la base de datos
        /// </summary>
        /// <returns>Lista de objetos</returns
		public static <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %> GetList()
        {
            CriteriaEx criteria = <%= ToProperty(objTable.Alias) %>.GetCriteria(<%= ToProperty(objTable.Alias) %>.OpenSession());

            if (nHManager.Instance.UseDirectSQL)
                criteria.Query = <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>.SELECT(AppContext.<%= Schema %>);

            <%= ToProperty(objTable.Alias) %>.BeginTransaction(criteria.SessionCode);

            //No criteria. Retrieve all de List
            return DataPortal.Fetch<<%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>>(criteria);
        }

        #endregion

        #region Root Data Access

        /// <summary>
        /// Obtiene una lista desde la base de datos
        /// Es llamada por el DataPortal
        /// </summary>
        /// <param name="criteria">Criteria con los criterios de filtrado</param>
        private void DataPortal_Fetch(CriteriaEx criteria)
        {
            Fetch(criteria);
        }

        /// <summary>
        /// Obtiene una lista desde la base de datos
        /// </summary>
        /// <param name="criteria">Criteria con los criterios de filtrado</param>
        private void Fetch(CriteriaEx criteria)
        {
            this.RaiseListChangedEvents = false;

            SessionCode = criteria.SessionCode;

            try
            {
                if (nHMng.UseDirectSQL)
                {
                    <%= ToProperty(objTable.Alias) %>.DoLOCK(AppContext.<%= Schema %>, Session());

                    IDataReader reader = nHMng.SQLNativeSelect(criteria.Query, Session());

                    while (reader.Read())
                         this.AddItem(<%= ToProperty(objTable.Alias) %>.GetChild(reader));
                }
                else
                {
                    IList list = criteria.List();

                    foreach (<%= ToProperty(objTable.Alias) %> item in list)
                    {
                        //Bloqueamos todos los elementos de la lista
                        Session().Lock(Session().Get<<%= ToProperty(objTable.Alias) %>>(item.Oid), LockMode.UpgradeNoWait);
                        this.AddItem(<%= ToProperty(objTable.Alias) %>.GetChild(item));
                    }
                }

            }
            catch (NHibernate.ADOException)
            {
                if (Transaction() != null) Transaction().Rollback();
                iQExceptionHandler.ThrowExceptionByADOCode(ex);
            }
            catch (Exception ex)
            {
                if (Transaction() != null) Transaction().Rollback();
                throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
            }
            finally
            {
                this.RaiseListChangedEvents = true;
            }
        }

        protected override void DataPortal_Update()
        {
            bool success = false;

            this.RaiseListChangedEvents = false;

            // update (thus deleting) any deleted child objects
            foreach (<%= ToProperty(objTable.Alias) %> obj in DeletedList)
                obj.DeleteSelf(this);

            // now that they are deleted, remove them from memory too
            DeletedList.Clear();

            try
            {
                // add/update any current child objects
                foreach (<%= ToProperty(objTable.Alias) %> obj in this)
                {
				    if (!ExistOtherItem(obj))
                    {
						if (obj.IsNew)
							obj.Insert(this);
						else
							obj.Update(this);
					}
                }

                Transaction().Commit();

                success = true;
            }
            catch (Exception ex)
            {
                throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
            }
            finally
            {
                if (!success)
                    if (Transaction() != null) Transaction().Rollback();

                BeginTransaction();
                this.RaiseListChangedEvents = true;
            }
        }

        #endregion

    }
}
<% end sub
''Se llama si la tabla es no auxiliar
sub NoAuxiliar (objTable, auxiliar, Schema, namespace)
%>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.ComponentModel;

using Csla;
using CslaEx;

using moleQule.Library;

using NHibernate;

namespace <%= namespace %>
{
    /// <summary>
    /// Editable Root Collection
    /// </summary>
    [Serializable()]
    public class <%= ToProperty(objTable.Alias) + GetLetraS(objTable.Alias) %> : BusinessListBaseEx<<%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>, <%= ToProperty(objTable.Alias) %>>
    {

        #region Business Methods

        /// <summary>
        /// Crea e inserta un nuevo elemento en la lista
        /// </summary>
        /// <returns>Nuevo elemento creado</returns>
        public <%= ToProperty(objTable.Alias) %> NewItem()
        {
            this.AddItem(<%= ToProperty(objTable.Alias) %>.NewChild());
            return this[Count - 1];
        }

        #endregion

        #region Authorization Rules

        public static bool CanAddObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanGetObject()
        {
            return ApplicationContextEx.User.CanReadObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanDeleteObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanEditObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        #endregion

        #region Factory Methods

        private <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>() { }

        public static <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %> NewList() { return new <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>(); }

        /// <summary>
        /// Obtiene una lista de todos los elementos de la base de datos
        /// </summary>
        /// <returns>Lista de objetos</returns
		public static <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %> GetList()
        {
            CriteriaEx criteria = <%= ToProperty(objTable.Alias) %>.GetCriteria(<%= ToProperty(objTable.Alias) %>.OpenSession());

            if (nHManager.Instance.UseDirectSQL)
                criteria.Query = <%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>.SELECT(AppContext.<%= Schema %>);

            <%= ToProperty(objTable.Alias) %>.BeginTransaction(criteria.SessionCode);

            //No criteria. Retrieve all de List
            return DataPortal.Fetch<<%= ToProperty(objTable.Alias)+ GetLetraS(objTable.Alias) %>>(criteria);
        }

        #endregion

        #region Root Data Access

        /// <summary>
        /// Obtiene una lista desde la base de datos
        /// Es llamada por el DataPortal
        /// </summary>
        /// <param name="criteria">Criteria con los criterios de filtrado</param>
        private void DataPortal_Fetch(CriteriaEx criteria)
        {
            Fetch(criteria);
        }

        /// <summary>
        /// Obtiene una lista desde la base de datos
        /// </summary>
        /// <param name="criteria">Criteria con los criterios de filtrado</param>
        private void Fetch(CriteriaEx criteria)
        {
            this.RaiseListChangedEvents = false;

            SessionCode = criteria.SessionCode;

            try
            {
                if (nHMng.UseDirectSQL)
                {
                    <%= ToProperty(objTable.Alias) %>.DoLOCK(AppContext.<%= Schema %>, Session());

                    IDataReader reader = nHMng.SQLNativeSelect(criteria.Query, Session());

                    while (reader.Read())
                         this.AddItem(<%= ToProperty(objTable.Alias) %>.GetChild(reader));
                }
                else
                {
                    IList list = criteria.List();

                    foreach (<%= ToProperty(objTable.Alias) %> item in list)
                    {
                        //Bloqueamos todos los elementos de la lista
                        Session().Lock(Session().Get<<%= ToProperty(objTable.Alias) %>>(item.Oid), LockMode.UpgradeNoWait);
                        this.AddItem(<%= ToProperty(objTable.Alias) %>.GetChild(item));
                    }
                }

            }
            catch (NHibernate.ADOException)
            {
                if (Transaction() != null) Transaction().Rollback();
                iQExceptionHandler.ThrowExceptionByADOCode(ex);
            }
            catch (Exception ex)
            {
                if (Transaction() != null) Transaction().Rollback();
                throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
            }
            finally
            {
                this.RaiseListChangedEvents = true;
            }
        }

        protected override void DataPortal_Update()
        {
            bool success = false;

            this.RaiseListChangedEvents = false;

            // update (thus deleting) any deleted child objects
            foreach (<%= ToProperty(objTable.Alias) %> obj in DeletedList)
                obj.DeleteSelf(this);

            // now that they are deleted, remove them from memory too
            DeletedList.Clear();

            try
            {
                // add/update any current child objects
                foreach (<%= ToProperty(objTable.Alias) %> obj in this)
                {
					if (obj.IsNew)
						obj.Insert(this);
                    else
                        obj.Update(this);
                }

                Transaction().Commit();

                success = true;
            }
            catch (Exception ex)
            {
                throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
            }
            finally
            {
                if (!success)
                    if (Transaction() != null) Transaction().Rollback();

                BeginTransaction();
                this.RaiseListChangedEvents = true;
            }
        }

        #endregion

    }
}
<% end sub

	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	length = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = length Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		If trimName = True Then
			filename = filename & "_" & ToProperty(objTable.Alias) & GetLetraS(objTable.Alias) & ".cs"
		Else
			filename = filename & "_" & ToProperty(objTable.Alias) & GetLetraS(objTable.Alias) & ".cs"
		End If
	Else 
		If trimName = True Then
			filename = filename & ToProperty(objTable.Alias) & GetLetraS(objTable.Alias) & ".cs"
		Else
			filename = filename & ToProperty(objTable.Alias) & GetLetraS(objTable.Alias) & ".cs"
		End If
	End If

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer

Function GetLetraS (Nombre)
	if not (LCase(Mid(Nombre, Len(Nombre), 1)) = "a" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "e" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "i" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "o" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "u") then
		GetLetraS = "es"
	else
		GetLetraS = "s"
	end if
end function

'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " And Not Char = "." Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetDataType (tipo)
	Dim retVal
	Select Case tipo 
		Case "varchar"
			GetDataType = "string"
		Case "text"
			GetDataType = "string"
		Case "date"
			GetDataType = "DateTime"
		Case "bool"
			GetDataType = "bool"
		Case "char"
			GetDataType = "Char"
		Case "date"
			GetDataType = "DateTime"
		Case "float4"
			GetDataType = "float"
		Case "float8"
			GetDataType = "double"
		Case "int2"
			GetDataType = "short"
		Case "int4"
			GetDataType = "int"
		Case "int8"
			GetDataType = "long"
		Case "numeric"
			GetDataType = "Decimal"
		Case "money"
			GetDataType = "Decimal"
		Case "time"
			GetDataType = "DateTime"
		Case "timestamp"
			GetDataType = "DateTime"
		Case "bigint"
			GetDataType = "long"
		Case "decimal"
			GetDataType = "Decimal"
		Case Else
			GetDataType = ""
	End Select
End Function

Function ToProperty (name)
	
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)
	upper = 1

	For j = 1 To l			
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			upper = 1
		Else
			If (upper = 1) Then
				str = str & UCase(char)
				upper = 0
			Else 
				str = str & LCase(char)
			End If
		End If
	Next
	ToProperty = str
	
End Function

%>
##|BODY_END
