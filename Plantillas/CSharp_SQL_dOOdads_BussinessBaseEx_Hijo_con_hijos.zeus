##|TYPE Template
##|UNIQUEID f556a6c3-ffd8-47e0-820d-615cda7091a5
##|TITLE HijoConHijos_BusinessBaseEx
##|NAMESPACE dOOdads.C#
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim lstParents
Dim chk

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title = "Generate C# dOOdads"
	ui.Width  = 330
	ui.Height = 760

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then 
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
	
	ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
	ui.AddTextBox "txtNamespace", "Your.Namespace", "Provide your objects namespace."			

	' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
	'lstTables.IsMultiSelect = false
	lstTables.Height = 120
	
	ui.AddLabel "lblParent", "Seleccionar PADRES:", ""
	Set lstParents = ui.AddListBox ("lstParents", "Seleccionar PADRES:")
	lstParents.IsMultiSelect = true
	lstParents.Height = 120
	
	ui.AddLabel "lblChild", "Seleccionar HIJOS:", ""
	Set lstChilds = ui.AddListBox ("lstChilds", "Seleccionar HIJOS:")
	lstChilds.IsMultiSelect = true
	lstChilds.Height = 120
	
	Set chkAux = ui.AddCheckBox ("chkAux", "Tabla Auxiliar", false, "")
	ui.Height = ui.Height + 40

	Set prefix = ui.AddCheckBox("prefix", "Prefix the 'File' with an underscore?", false, "If checked, the file on disk will begin with an underscore")
	Set trimName = ui.AddCheckBox("trimName", "Trim spaces from output filename?", false, "If checked, the file on disk will have spaces trimmed from the name.")
	

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
	
	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
	lstParents.BindData(db.Tables)
	lstChilds.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2004, 2005 by MyGeneration Software
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' BusinessBaseEx_HijoSinHijos.vbgen
' Last Update : 28/11/2008
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objTable
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim props
Dim prefix
Dim trimName
Dim auxiliar

Dim IDbCommand
Dim IDataParameter
Dim ParameterPrefix

Dim dialect

dialect = 1
If input.Item("ckDialect3") Then
	dialect = 3
End If

prefix = input.Item("prefix")
trimName = input.Item("trimName")

IDbCommand    = GetIDbCommand()
IDataParameter = GetIDataParameter()
ParameterPrefix = GetParameterPrefix()

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")
Set ChildNames = input.Item("lstChilds")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))
	Set props = objTable.Properties
	
	Schema = objTable.Schema
	if (Schema = "COMMON") Then
		Schema = "CommonSchema"
	else
		Schema = "ActiveSchema.Code"
	end if
	
	if input.Item("chkAux") then
		auxiliar = "AUXILIARES"
	else
		auxiliar = UCase(ToProperty(objTable.Alias))
	end if
	
	TableName = ToProperty(objTable.Alias)

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;

using Csla;
using Csla.Validation;
using CslaEx;

using moleQule.Library;

using NHibernate;

namespace <%= namespace %>
{
	/// <summary>
	/// Editable Child Business Object With Editable Child Collection
	/// </summary>
    [Serializable()]
    public class <%= TableName %> : BusinessBaseEx<<%= TableName %>>
    {

		#region Business Methods

		<% 
			 For Each objColumn in objTable.Columns
				name = LCase(objColumn.Name)
				If (name <> "oid") Then
					if (InStr(name, "oid") = 1) then
						tipo = "long"
					else
						tipo = GetDataType(objColumn.DataTypeName)
					end if
					name = "_" & name %>
		private <%= tipo & " " & name %><%
					If (tipo = "string") Then
					%> = string.Empty<%
					End If
					If (tipo = "bool") Then 
					%> = false<%
					End If
					%>;<%
				End If
			Next 
			  
			For Each objColumn in objTable.Columns
				name = GetAlias(objColumn)
				If (name <> "OID") Then
					tipo = GetDataType(objColumn.DataTypeName)%>
public virtual <%= tipo %> <%= ToProperty(name) %>
		{
			
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _<%= LCase(name) %>;
            }
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				<%
				If (tipo = "string") Then 
				%>if (value == null) value = string.Empty;
				<%
				End If
				%>if (!_<%= LCase(name) %>.Equals(value))
				{
					_<%= LCase(name) %> = value;
					PropertyHasChanged();
				}
			}
		}
		<%		End If
			Next %>

public override bool IsValid
		{
			get { return base.IsValid<% for each childName in ChildNames %>
						 && _<%= LCase(childName)+ GetLetraS(childName)%>.IsValid<% Next %> ; }
		}
		
		//Para añadir una lista: || _lista.IsDirty
		public override bool IsDirty
		{
			get { return base.IsDirty<% for each childName in ChildNames %>
						 || _<%= LCase(childName)+ GetLetraS(childName)%>.IsDirty<% Next %> ; }
		}

		/// <summary>
		/// Copia los atributos del objeto
		/// </summary>
		/// <param name="source">Objeto origen</param>
		protected override void CopyValues (<%= ToProperty(objTable.Alias) %> source)
		{
			if (source == null) return;
			<%
			For Each objColumn in objTable.Columns
				name = GetAlias(objColumn)
				attr = "_" & LCase(name)
			%><%= attr %> = source.<%= ToProperty(name) %>;
			<%
			Next
			%>
		}
	
        protected override object GetIdValue() { return _oid; }

        /// <summary>
        /// Clona la entidad y sus subentidades y las marca como nuevas
        /// </summary>
        /// <returns>Una entidad clon</returns>
		public virtual <%= TableName %> CloneAsNew()
		{
			<%= TableName %> clon = base.Clone();
			
			//Se definen el Oid y el Coidgo como nueva entidad
			Random rd = new Random();
			clon.Oid = rd.Next();
			
			<% 
			for each objColumn in objTable.Columns
				if UCase(objColumn) = "CODIGO" then
			%>clon.Codigo = (0).ToString(Resources.Defaults.<%= UCase(objTable.Alias) %>_CODE_FORMAT);
			<%	end if
			next
			%>clon.SessionCode = <%= TableName %>.OpenSession();
			<%= ToProperty(objTable.Alias) %>.BeginTransaction(clon.SessionCode);
			
			clon.MarkNew();
			<% for each ChildName in ChildNames %>clon.<%= ToProperty(ChildName)+ GetLetraS(childName) %>.MarkAsNew();
			<% Next %>
			return clon;
		}

        /// <summary>
        /// Devuelve el siguiente código de <% TableName %>.
        /// </summary>
        /// <returns>Código</returns>
        public static string GetNewCode()
        {
            Int64 lastcode = <% TableName %>.GetNewSerial();

            // Devolvemos el siguiente codigo de Red 
            return lastcode.ToString(Resources.Defaults.<% UCase(objTable.Alias) %>_CODE_FORMAT);
        }

        /// <summary>
        /// Devuelve el siguiente Serial de <% TableName %>.
        /// </summary>
        /// <returns>Código</returns>
        private static Int64 GetNewSerial()
        {
            // Obtenemos la lista de Redes ordenados por serial
            SortedBindingList<<% TableName %>Info> lista = <% TableName %>List.GetSortedList("Serial", ListSortDirection.Ascending);

            // Obtenemos el último serial de servicio
            Int64 lastcode;

            if (lista.Count > 0)
                lastcode = lista[lista.Count - 1].Serial;
            else
                lastcode = Convert.ToInt64(Resources.Defaults.<% UCase(objTable.Alias) %>_CODE_FORMAT);

            lastcode++;
            return lastcode;
        }

        #endregion

        #region Validation Rules

        protected override void AddBusinessRules()
        {
        }

        #endregion

        #region Authorization Rules

        public static bool CanAddObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanGetObject()
        {
            return ApplicationContextEx.User.CanReadObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanDeleteObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        public static bool CanEditObject()
        {
            return ApplicationContextEx.User.CanWriteObject(Resources.ElementosSeguros.<%= auxiliar %>);
        }

        #endregion

		#region Common Factory Methods

		/// <summary>
		/// NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
		/// Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
		/// pero debe ser protected por exigencia de NHibernate
		/// y public para que funcionen los DataGridView
		/// </summary>
		public <%= TableName %>() 
		{
			MarkAsChild();
			Random r = new Random();
			_oid = (long)r.Next();
			_codigo = _oid.ToString(Resources.Defaults.<%= UCase(objTable.Alias) %>_CODE_FORMAT);
		}

		public virtual <%= TableName %>Info GetInfo(bool get_childs)
		{
			if (!CanGetObject())
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);

            if (get_childs)
				return new <%= TableName %>Info(this, true);
			else
				return new <%= TableName %>Info(this);
		}

        public virtual <%= TableName %>Info GetInfo()
        { 
            return GetInfo(true); 
        }

		#endregion

		#region Child Factory Methods

		private <%= TableName %>(<%= TableName %> source)
        {
            MarkAsChild();
            Fetch(source);
        }

        private <%= TableName %>(IDataReader source, bool childs)
        {
            MarkAsChild();
            Childs = childs;
            Fetch(source);
        }

		//Para instancias sin padre
		internal static <%= TableName %> NewChild()
		{
			if (!CanAddObject())
				throw new System.Security.SecurityException(
				  Resources.Messages.USER_NOT_ALLOWED);

			return DataPortal.Create<<%= TableName %>>(new CriteriaCs(-1));
		}

		<% for each parentName in parentNames %>
		internal static <%= TableName %>  NewChild(<%= ToProperty(parentName) %> parent)
		{
			if (!CanAddObject())
				throw new System.Security.SecurityException(
					Resources.Messages.USER_NOT_ALLOWED);

			<%= TableName %> obj = new <%= TableName %>();
			obj.Oid<%= ToProperty(parentName) %> = parent.Oid;
			return obj;
		}
		<% next %>

		internal static <%= TableName %> GetChild(<%= TableName %> source)
		{
			return new <%= TableName %>(source);
		}

        internal static <%= TableName %> GetChild(IDataReader source, bool childs)
        {
            return new <%= TableName %>(source, childs);
        }

		/// <summary>
		/// Borrado aplazado, es posible el undo 
		/// (La función debe ser "no estática")
		/// </summary>
		public override void Delete()
		{
			if (!CanDeleteObject())
				throw new System.Security.SecurityException(
					Resources.Messages.USER_NOT_ALLOWED);

			MarkDeleted();
		}

		/// <summary>
		/// No se debe utilizar esta función para guardar. Hace falta el padre.
		/// Utilizar Insert o Update en sustitución de Save.
		/// </summary>
		/// <returns></returns>
		public override <%= TableName %> Save()
		{
			throw new iQException(Resources.Messages.CHILD_SAVE_NOT_ALLOWED);
		}

		#endregion

		#region Common Data Access

		[RunLocal()]
		private void DataPortal_Create(CriteriaCs criteria)
		{
		}

		#endregion

		#region Child Data Access

		private void Fetch(Red source)
		{
            try
            {
                SessionCode = source.SessionCode;

                CopyValues(source);
                if (Childs)
                {
                    CriteriaEx criteria = Equipo.GetCriteria(Session());
                    criteria.AddEq("OidRed", this.Oid);
                    criteria.AddOrder("Codigo", true);
                    _equipos = Equipos.GetChildList(criteria.List<Equipo>());
                }
            }
            catch (Exception ex)
            {
                throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
            }

			MarkOld();
		}

        private void Fetch(IDataReader source)
        {
            try
            {
                CopyValues(source);

                Equipo.DoLOCK(AppContext.ActiveSchema.Code, Session());

                if (Childs)
                {
                    string query = Equipos.SELECT_BY_FIELD(AppContext.ActiveSchema.Code, "OidRed", this.Oid);
                    IDataReader reader = nHManager.Instance.SQLNativeSelect(query, Session()); 
                    _equipos = Equipos.GetChildList(reader, false);
                }
            }
            catch (Exception ex)
            {
                throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
            }

            MarkOld();
        }

		internal void Insert(Cliente parent)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;

			//Debe obtener la sesion del padre pq el objeto es padre a su vez
			SessionCode = parent.SessionCode;

			_oid_cliente = parent.Oid;
			_codigo = GetNewCode();
			_serial = GetNewSerial();

			try
			{
				ValidationRules.CheckRules();
				
				if (!IsValid)
					throw new iQValidationException(Resources.Messages.GENERIC_VALIDATION_ERROR);

				parent.Session().Save(this);

				_equipos.Update(this);
			}
			catch (Exception ex)
			{
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}

			MarkOld();
		}

		internal void Update(Cliente parent)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;

			//Debe obtener la sesion del padre pq el objeto es padre a su vez
			SessionCode = parent.SessionCode;

			_oid_cliente = parent.Oid;

			try
			{
				ValidationRules.CheckRules();

				if (!IsValid)
					throw new iQValidationException(Resources.Messages.GENERIC_VALIDATION_ERROR);

				Red obj = parent.Session().Get<Red>(Oid);
				obj.CopyValues(this);
				parent.Session().Update(obj);

				_equipos.Update(this);
			}
			catch (Exception ex)
			{
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}

			MarkOld();
		}

		internal void DeleteSelf(Cliente parent)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;

			// if we're new then don't update the database
			if (this.IsNew) return;

			try
			{
				SessionCode = parent.SessionCode;
				Session().Delete(Session().Get<Red>(Oid));
			}
			catch (Exception ex)
			{
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}

			MarkNew();
		}
		
		#endregion

        #region Commands

        public static bool Exists(string codigo)
        {
            ExistsCmd result;
            result = DataPortal.Execute<ExistsCmd>(new ExistsCmd(codigo));
            return result.Exists;
        }

        [Serializable()]
        private class ExistsCmd : CommandBase
        {
            private string _codigo;
            private bool _exists = false;

            public bool Exists
            {
                get { return _exists; }
            }

            public ExistsCmd(string codigo)
            {
                _codigo = codigo;
            }

            protected override void DataPortal_Execute()
            {
                // Buscar por codigo
                CriteriaEx criteria = Red.GetCriteria(Red.OpenSession());
                criteria.AddCodeSearch(_codigo);
                RedList list = RedList.GetList(criteria);
                _exists = !(list.Count == 0);
            }
        }

        #endregion

    }
}

<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	length = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = length Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		If trimName = True Then
			filename = filename & "_" & ToProperty(objTable.Alias) & ".cs"
		Else
			filename = filename & "_" & ToProperty(objTable.Alias) & ".cs"
		End If
	Else 
		If trimName = True Then
			filename = filename & ToProperty(objTable.Alias) & ".cs"
		Else
			filename = filename & ToProperty(objTable.Alias) & ".cs"
		End If
	End If

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer
	
Function GetLetraS (Nombre)
	if not (LCase(Mid(Nombre, Len(Nombre), 1)) = "a" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "e" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "i" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "o" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "u") then
		GetLetraS = "es"
	else
		GetLetraS = "s"
	end if
end function

'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " And Not Char = "." Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetDataType (tipo)
	Dim retVal
	Select Case tipo 
		Case "varchar"
			GetDataType = "string"
		Case "text"
			GetDataType = "string"
		Case "date"
			GetDataType = "DateTime"
		Case "bool"
			GetDataType = "bool"
		Case "char"
			GetDataType = "Char"
		Case "date"
			GetDataType = "DateTime"
		Case "float4"
			GetDataType = "float"
		Case "float8"
			GetDataType = "double"
		Case "int2"
			GetDataType = "short"
		Case "int4"
			GetDataType = "int"
		Case "int8"
			GetDataType = "long"
		Case "numeric"
			GetDataType = "Decimal"
		Case "money"
			GetDataType = "Decimal"
		Case "time"
			GetDataType = "DateTime"
		Case "timestamp"
			GetDataType = "DateTime"
		Case "bigint"
			GetDataType = "long"
		Case "decimal"
			GetDataType = "Decimal"
		Case Else
			GetDataType = ""
	End Select
End Function

Function ToProperty (name)
	
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = TrimSpaces(name)
	l = Len(tname)
	upper = 1

	For j = 1 To l			
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			upper = 1
		Else
			If (upper = 1) Then
				str = str & UCase(char)
				upper = 0
			Else 
				str = str & LCase(char)
			End If
		End If
	Next
	ToProperty = str
	
End Function

Function ToClassName (name)
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)

	For j = 1 To l			
		char = Mid(tname, j, 1)
		If (char <> "_") Then 
			str = str & char
		End If
	Next
	ToClassName = str
	
End Function
%>
##|BODY_END
