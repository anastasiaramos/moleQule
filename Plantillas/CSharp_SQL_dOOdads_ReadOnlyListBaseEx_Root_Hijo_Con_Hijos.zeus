##|TYPE Template
##|UNIQUEID 34fda009-40f4-412e-9ca8-8155d7fa47bd
##|TITLE Root/Hijo_Con_Hijos_ReadOnlyListEx
##|NAMESPACE dOOdads.C#
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim lstParents
Dim lstChilds
Dim chk

Sub setup()

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

	ui.Title = "Generate C# dOOdads"
	ui.Width  = 330
	ui.Height = 760

	' Grab default output path
	Dim sOutputPath
	sOutputPath = ""
	If input.Contains("defaultOutputPath") Then 
		sOutputPath = input.Item("defaultOutputPath")
	End If

	ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
	ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
	ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true
	
	ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
	ui.AddTextBox "txtNamespace", "Your.Namespace", "Provide your objects namespace."			

	' List Databases in a ComboBox
	ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
	Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

	' List Tables in a listbox
	ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
	Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
	'lstTables.IsMultiSelect = false
	lstTables.Height = 120
	
	ui.AddLabel "lblParent", "Seleccionar PADRES:", ""
	Set lstParents = ui.AddListBox ("lstParents", "Seleccionar PADRES:")
	lstParents.IsMultiSelect = true
	lstParents.Height = 120
	
	ui.AddLabel "lblChild", "Seleccionar HIJOS:", ""
	Set lstChilds = ui.AddListBox ("lstChilds", "Seleccionar HIJOS:")
	lstChilds.IsMultiSelect = true
	lstChilds.Height = 120
	
	Set chkAux = ui.AddCheckBox ("chkAux", "Tabla Auxiliar", false, "")
	ui.Height = ui.Height + 40

	Set prefix = ui.AddCheckBox("prefix", "Prefix the 'File' with an underscore?", false, "If checked, the file on disk will begin with an underscore")
	Set trimName = ui.AddCheckBox("trimName", "Trim spaces from output filename?", false, "If checked, the file on disk will have spaces trimmed from the name.")
	

	' Attach the onchange event to the cmbDatabases control.
	setupDatabaseDropdown cmbDatabases
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
	
	ui.ShowGUI = true

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
	lstParents.BindData(db.Tables)
	lstChilds.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2004, 2005 by MyGeneration Software
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' MYGENERATION SOFTWARE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL MYGENERATION SOFTWARE BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' BusinessBaseEx_HijoSinHijos.vbgen
' Last Update : 28/11/2008
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim bFirst
Dim name
Dim pname
Dim objTable
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim props
Dim prefix
Dim trimName
Dim ChildNames

Dim IDbCommand
Dim IDataParameter
Dim ParameterPrefix

Dim dialect

dialect = 1
If input.Item("ckDialect3") Then
	dialect = 3
End If

prefix = input.Item("prefix")
trimName = input.Item("trimName")

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")
Set parentNames = input.Item("lstParents")
Set childNames = input.Item("lstChilds")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))
	Set props = objTable.Properties
	TableName = ToProperty(objTable.Alias)
	TableNameConS = TableName + GetLetraS(TableName)
	
	Schema = objTable.Schema
	if (Schema = "COMMON") Then
		Schema = "CommonSchema"
	else
		Schema = "ActiveSchema.Code"
	end if
	
	if input.Item("chkAux") then
		auxiliar = "AUXILIAR"
	else
		auxiliar = UCase(objTable.Alias)
	end if
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;

using Csla;
using CslaEx;

using moleQule.Library;

namespace <%= NameSpace %>
{
	/// <summary>
	/// Read Only Root Collection of Business Objects With Child Collection
	/// Read Only Child Collection of Business Objects With Child Collection
	/// </summary>
    [Serializable()]
    public class <%= TableName %>List : ReadOnlyListBaseEx<<%= TableName %>List, <%= TableName %>Info>
    {

        #region Factory Methods

        private <%= TableName %>List() { }

        private <%= TableName %>List(IDataReader reader)
        {
            Fetch(reader);
        }

        /// <summary>
        /// Retrieve the complete list from db
        /// </summary>
        /// <param name="get_childs">retrieving the childs</param>
        /// <returns><%= TableName %>List</returns>
        public static <%= TableName %>List GetChildList(bool childs)
        {
			CriteriaEx criteria = <%= TableName %>.GetCriteria(<%= TableName %>.OpenSession());
			criteria.Childs = childs;
			
			//No criteria. Retrieve all de List
			if (nHManager.Instance.UseDirectSQL)
				criteria.Query = <%= TableName %>List.SELECT(typeof(<%= TableName %>), AppContext.<%= Schema %>);
			
			//else -> No criteria. Retrieve all the list.
			
			<%= TableName %>List list = DataPortal.Fetch<<%= TableName %>List>(criteria);
			
			CloseSession(criteria.SessionCode);
			return list;
        }
		
		#endregion
		
		#region Root Factory Methods
		
		/// <summary>
		/// Retrieve the complete list from db
		/// </summary>
		/// <param name="get_childs">retrieving the childs</param>
		/// <returns></returns>
		public static <%= TableName %>List GetList(bool childs)
		{
			CriteriaEx criteria = <%= TableName %>.GetCriteria(<%= TableName %>.OpenSession());
			criteria.Childs = childs;
			
			//No criteria. Retrieve all de List
			if (nHManager.Instance.UseDirectSQL)
				criteria.Query = <%= TableName %>List.SELECT(typeof(<%= TableName %>), AppContext.<%= Schema %>);
			<%= TableName %>List list = DataPortal.Fetch<%= "<" & TableName & "List>" %>(criteria);
			
			CloseSession(criteria.SessionCode);
			return list;
		}
		
		/// <summary>
		/// Default call for GetList(bool get_childs)
		/// </summary>
		/// <returns></returns>
		public static <%= TableName %>List GetList()
		{
			return <%= TableName %>List.GetList(true);
		}
		
		/// <summary>
		/// Devuelve una lista de todos los elementos
		/// </summary>
		/// <returns>Lista de elementos</returns>
		public static <%= TableName %>List GetList(CriteriaEx criteria)
		{
			return <%= TableName %>List.RetrieveList(typeof(<%= TableName %>), AppContext.<%= Schema %>, criteria);
		}
		
		/// <summary>
		/// Builds a <%= TableName %>List from a IList<!--<<%= TableName %>Info>-->.
		/// Doesnt retrieve child data from DB.
		/// </summary>
		/// <param name="list"></param>
		/// <returns></returns>
		public static <%= TableName %>List GetList(IList<<%= TableName%>Info> list)
		{
			<%= TableName %>List flist = new <%= TableName %>List();
			
			if (list.Count > 0)
			{
				flist.IsReadOnly = false;
				
				foreach (<%= TableName %>Info item in list)
					flist.Add(item);
				
				flist.IsReadOnly = true;
			}
			
			return flist;
		}
		
		/// <summary>
		/// Devuelve una lista ordenada de todos los elementos
		/// </summary>
		/// <param name="sortProperty">Campo de ordenación</param>
		/// <param name="sortDirection">Sentido de ordenación</param>
		/// <returns>Lista ordenada de elementos</returns>
		public static SortedBindingList<<%= TableName %>Info> GetSortedList (string sortProperty, ListSortDirection sortDirection)
		{
			SortedBindingList<<%= TableName %>Info> sortedList = new SortedBindingList<<%= TableName %>Info>(GetList());
			
			sortedList.ApplySort(sortProperty, sortDirection);
			return sortedList;
		}
		
		/// <summary>
        /// Devuelve una lista ordenada de todos los elementos y sus hijos
        /// </summary>
        /// <param name="sortProperty">Campo de ordenación</param>
        /// <param name="sortDirection">Sentido de ordenación</param>
        /// <param name="childs">Traer hijos</param>
        /// <returns>Lista ordenada de elementos</returns>
        public static SortedBindingList<<%= TableName %>Info> GetSortedList(string sortProperty, ListSortDirection sortDirection, bool childs)
        {
            SortedBindingList<<%= TableName %>Info> sortedList = new SortedBindingList<<%= TableName %>Info>(GetList(childs));

            sortedList.ApplySort(sortProperty, sortDirection);
            return sortedList;
        }
		
		/// <summary>
        /// Builds a <%= TableName %>List from a IList<!--<<%= TableName %>>-->
        /// </summary>
        /// <param name="list"></param>
        /// <returns><%= TableName %>List</returns>
        public static <%= TableName %>List GetList(IList<<%= TableName %>> list)
        {
            <%= TableName %>List flist = new <%= TableName %>List();

            if (list != null)
            {
                flist.IsReadOnly = false;

                foreach (<%= TableName %> item in list)
                    flist.Add(item.GetInfo());

                flist.IsReadOnly = true;
            }

            return flist;
        }
		
		#endregion
		
		
		#region Child Factory Methods

        /// <summary>
        /// Default call for GetChildList(bool get_childs)
        /// </summary>
        /// <returns></returns>
        public static <%= TableName %>List GetChildList()
        {
            return <%= TableName %>List.GetChildList(true);
        }

		/// <summary>
		/// Builds a <%= TableName %>List from a IList<!--<<%= TableName %>Info>-->
		/// </summary>
		/// <param name="list"></param>
		/// <returns><%= TableName %>List</returns>
		public static <%= TableName %>List GetChildList(IList<<%= TableName %>Info> list)
		{
			<%= TableName %>List flist = new <%= TableName %>List();

			if (list.Count > 0)
			{
				flist.IsReadOnly = false;

				foreach (<%= TableName %>Info item in list)
					flist.Add(item);

				flist.IsReadOnly = true;
			}

			return flist;
		}

		/// <summary>
		/// Builds a <%= TableName %>List from IList<!--<<%= TableName %>>--> and retrieve <%= TableName %>Info Childs from DB
		/// </summary>
		/// <param name="list"></param>
		/// <returns><%= TableName %>List</returns>
		public static <%= TableName %>List GetChildList(IList<<%= TableName %>> list)
		{
			<%= TableName %>List flist = new <%= TableName %>List();

			if (list != null)
			{
				int sessionCode = <%= TableName %>.OpenSession();
				CriteriaEx criteria = null;

				flist.IsReadOnly = false;

				foreach (<%= TableName %> item in list)
				{
					<% for each childName in ChildNames %>
					criteria = <%= ToProperty(ChildName) %>.GetCriteria(sessionCode);
					criteria.AddEq("Oid<%= TableName %>", item.Oid);
					criteria.AddOrder("Codigo", true);
					item.<%= ToProperty(ChildName)+ GetLetraS(childName) %> = <%= ToProperty(ChildName)+ GetLetraS(childName) %>.GetChildList(criteria.List<<%= ToProperty(ChildName) %>>());
					<% next %>
					
					flist.Add(item.GetInfo());
				}

				flist.IsReadOnly = true;

				<%= TableName %>.CloseSession(sessionCode);
			}
			
			return flist;
		}

        public static <%= TableName %>List GetChildList(IDataReader reader) { return new <%= TableName %>List(reader); }

        #endregion

        #region Data Access

        // called to retrieve data from database
        protected override void Fetch(CriteriaEx criteria)
        {
            this.RaiseListChangedEvents = false;

            SessionCode = criteria.SessionCode;
            Childs = criteria.Childs;

            try
            {
                if (nHMng.UseDirectSQL)
                {
                    IDataReader reader = <%= TableNameConS %>.DoSELECT(AppContext.ActiveSchema.Code, Session());

                    IsReadOnly = false;

                    while (reader.Read())
                    {
                        this.AddItem(<%= TableName %>Info.Get(reader, Childs));
                    }

                    IsReadOnly = true;
                }
                else
                {
                    IList list = criteria.List();

                    if (list.Count > 0)
                    {
					
                        foreach (<%= TableName %> item in list)
                        {
							IsReadOnly = false;
							
							this.Add(item.GetInfo(false));
								
							IsReadOnly = true;
                        }
					
					}
                }
  
            }
            catch (Exception ex)
            {
                throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
            }

            this.RaiseListChangedEvents = true;
        }

		// called to retrieve data from db
		protected override void Fetch(string hql)
		{
			this.RaiseListChangedEvents = false;

			try
			{
				IList list = nHMng.HQLSelect(hql);

				if (list.Count > 0)
				{
					IsReadOnly = false;

					foreach (<%= TableName %> item in list)
						this.Add(item.GetInfo(false));

					IsReadOnly = true;
				}
			}
			catch (Exception ex)
			{
				throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
			}

			this.RaiseListChangedEvents = true;
		}

        // called to retrieve data from db
        protected void Fetch(IDataReader reader)
        {
            this.RaiseListChangedEvents = false;

            try
            {
                IsReadOnly = false;

                while (reader.Read())
                {
                    this.AddItem(<%= TableName %>Info.Get(reader,Childs));
                }

                IsReadOnly = true;
       
            }
            catch (Exception ex)
            {
                throw new iQPersistentException(iQExceptionHandler.GetAllMessages(ex));
            }

            this.RaiseListChangedEvents = true;
        }

        #endregion
    }
}



<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	length = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = length Then
		filename = filename & "\"
	End If
	
	If prefix = True Then 
		If trimName = True Then
			filename = filename & "_" & TableName & "List.cs"
		Else
			filename = filename & "_" & TableName & "List.cs"
		End If
	Else 
		If trimName = True Then
			filename = filename & TableName & "List.cs"
		Else
			filename = filename & TableName & "List.cs"
		End If
	End If

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer
 %>

<% 
Function GetLetraS (Nombre)
	if not (LCase(Mid(Nombre, Len(Nombre), 1)) = "a" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "e" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "i" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "o" or _
			LCase(Mid(Nombre, Len(Nombre), 1)) = "u") then
		GetLetraS = "es"
	else
		GetLetraS = "s"
	end if
end function
'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " And Not Char = "." Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetDataType (tipo)
	Dim retVal
	Select Case tipo 
		Case "varchar"
			GetDataType = "string"
		Case "text"
			GetDataType = "string"
		Case "date"
			GetDataType = "DateTime"
		Case "bool"
			GetDataType = "bool"
		Case "char"
			GetDataType = "Char"
		Case "date"
			GetDataType = "DateTime"
		Case "float4"
			GetDataType = "float"
		Case "float8"
			GetDataType = "double"
		Case "int2"
			GetDataType = "short"
		Case "int4"
			GetDataType = "int"
		Case "int8"
			GetDataType = "long"
		Case "numeric"
			GetDataType = "Decimal"
		Case "money"
			GetDataType = "Decimal"
		Case "time"
			GetDataType = "DateTime"
		Case "timestamp"
			GetDataType = "DateTime"
		Case "bigint"
			GetDataType = "long"
		Case "decimal"
			GetDataType = "Decimal"
		Case Else
			GetDataType = ""
	End Select
End Function


Function ToProperty (name)
	
	Dim tname
	Dim str
	Dim char
	Dim l
	
	str = ""
	tname = name
	l = Len(tname)
	upper = 1

	For j = 1 To l			
		char = Mid(tname, j, 1)
		If (char = "_") Then 
			upper = 1
		Else
			If (upper = 1) Then
				str = str & UCase(char)
				upper = 0
			Else 
				str = str & LCase(char)
			End If
		End If
	Next
	ToProperty = str
	
End Function
%>
##|BODY_END
